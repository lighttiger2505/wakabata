/**
 * Generated by orval v7.5.0 üç∫
 * Do not edit manually.
 * OpenAPI
 * 
This is the autogenerated OpenAPI documentation for your [Fuego](https://github.com/go-fuego/fuego) API.

Below is a Fuego Cheatsheet to help you get started. Don't hesitate to check the [Fuego documentation](https://go-fuego.github.io/fuego) for more details.

Happy coding! üî•

## Usage

### Route registration

```go
func main() {
	// Create a new server
	s := fuego.NewServer()

	// Register some routes
	fuego.Post(s, "/hello", myController)
	fuego.Get(s, "/myPath", otherController)
	fuego.Put(s, "/hello", thirdController)

	adminRoutes := fuego.Group(s, "/admin")
	fuego.Use(adminRoutes, myMiddleware) // This middleware (for authentication, etc...) will be available for routes starting by /admin/*, 
	fuego.Get(adminRoutes, "/hello", groupController) // This route will be available at /admin/hello

	// Start the server
	s.Start()
}
```

### Basic controller

```go
type MyBody struct {
	Name string `json:"name" validate:"required,max=30"`
}

type MyResponse struct {
	Answer string `json:"answer"`
}

func hello(ctx fuego.ContextWithBody[MyBody]) (*MyResponse, error) {
	body, err := ctx.Body()
	if err != nil {
		return nil, err
	}

	return &MyResponse{Answer: "Hello " + body.Name}, nil
}
```

### Add openAPI information to the route

```go
import (
	"github.com/go-fuego/fuego"
	"github.com/go-fuego/fuego/option"
	"github.com/go-fuego/fuego/param"
)

func main() {
	s := fuego.NewServer()

	// Custom OpenAPI options
	fuego.Post(s, "/", myController
		option.Description("This route does something..."),
		option.Summary("This is my summary"),
		option.Tags("MyTag"), // A tag is set by default according to the return type (can be deactivated)
		option.Deprecated(), // Marks the route as deprecated in the OpenAPI spec

		option.Query("name", "Declares a query parameter with default value", param.Default("Carmack")),
		option.Header("Authorization", "Bearer token", param.Required()),
		optionPagination,
		optionCustomBehavior,
	)

	s.Run()
}

var optionPagination = option.Group(
	option.QueryInt("page", "Page number", param.Default(1), param.Example("1st page", 1), param.Example("42nd page", 42)),
	option.QueryInt("perPage", "Number of items per page"),
)

var optionCustomBehavior = func(r *fuego.BaseRoute) {
	r.XXX = "YYY"
}
```

Then, in the controller

```go
type MyResponse struct {
	Answer string `json:"answer"`
}

func getAllPets(ctx fuego.ContextNoBody) (*MyResponse, error) {
	name := ctx.QueryParam("name")
	perPage, _ := ctx.QueryParamIntErr("per_page")

	return &MyResponse{Answer: "Hello " + name}, nil
}
```

 * OpenAPI spec version: 0.0.1
 */
import axios from 'axios'
import type {
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
export type HTTPErrorErrorsItemMore = {[key: string]: unknown};

export type HTTPErrorErrorsItem = {
  more?: HTTPErrorErrorsItemMore;
  name?: string;
  reason?: string;
};

/**
 * HTTPError schema
 */
export interface HTTPError {
  /**
   * Human readable error message
   * @nullable
   */
  detail?: string | null;
  /** @nullable */
  errors?: HTTPErrorErrorsItem[] | null;
  /** @nullable */
  instance?: string | null;
  /**
   * HTTP status code
   * @nullable
   */
  status?: number | null;
  /**
   * Short title of the error
   * @nullable
   */
  title?: string | null;
  /**
   * URL of the error type. Can be used to lookup the error in a documentation
   * @nullable
   */
  type?: string | null;
}

/**
 * Task schema
 */
export interface Task {
  created_at?: string;
  description?: string;
  due_date?: string;
  id?: string;
  name?: string;
  priority?: number;
  project_id?: string;
  status?: string;
  updated_at?: string;
}

/**
 * TaskToCreate schema
 */
export interface TaskToCreate {
  description?: string;
  due_date?: string;
  name?: string;
  priority?: number;
  project_id?: string;
  status?: string;
}

/**
 * User schema
 */
export interface User {
  created_at?: string;
  email?: string;
  id?: string;
  password_hash?: string;
  updated_at?: string;
  username?: string;
}

/**
 * UserToCreate schema
 */
export interface UserToCreate {
  email: string;
  name: string;
  password_hash: string;
}

/**
 * unknown-interface schema
 */
export interface UnknownInterface {}





  /**
 * #### Controller: 

`github.com/lighttiger2505/wakabata/internal/app.(*TaskHandler).SearchTasks`

#### Middlewares:

- `github.com/go-fuego/fuego.defaultLogger.middleware`

---


 * @summary search tasks
 */
export const gETTasks = <TData = AxiosResponse<Task[]>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/tasks`,options
    );
  }

/**
 * #### Controller: 

`github.com/lighttiger2505/wakabata/internal/app.(*TaskHandler).CreateTask`

#### Middlewares:

- `github.com/go-fuego/fuego.defaultLogger.middleware`

---


 * @summary create task
 */
export const pOSTTasks = <TData = AxiosResponse<Task>>(
    taskToCreate: TaskToCreate, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/tasks`,
      taskToCreate,options
    );
  }

/**
 * #### Controller: 

`github.com/lighttiger2505/wakabata/internal/app.(*TaskHandler).GetTask`

#### Middlewares:

- `github.com/go-fuego/fuego.defaultLogger.middleware`

---


 * @summary get task
 */
export const gETTasksId = <TData = AxiosResponse<Task>>(
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/tasks/${id}`,options
    );
  }

/**
 * #### Controller: 

`github.com/lighttiger2505/wakabata/internal/app.(*TaskHandler).UpdateTask`

#### Middlewares:

- `github.com/go-fuego/fuego.defaultLogger.middleware`

---


 * @summary update task
 */
export const pUTTasksId = <TData = AxiosResponse<Task>>(
    id: string,
    task: Task, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.put(
      `/tasks/${id}`,
      task,options
    );
  }

/**
 * #### Controller: 

`github.com/lighttiger2505/wakabata/internal/app.(*UserHandler).SearchUsers`

#### Middlewares:

- `github.com/go-fuego/fuego.defaultLogger.middleware`

---


 * @summary search users
 */
export const gETUsers = <TData = AxiosResponse<User[]>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/users`,options
    );
  }

/**
 * #### Controller: 

`github.com/lighttiger2505/wakabata/internal/app.(*UserHandler).CreateUser`

#### Middlewares:

- `github.com/go-fuego/fuego.defaultLogger.middleware`

---


 * @summary create user
 */
export const pOSTUsers = <TData = AxiosResponse<User>>(
    userToCreate: UserToCreate, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/users`,
      userToCreate,options
    );
  }

/**
 * #### Controller: 

`github.com/lighttiger2505/wakabata/internal/app.(*UserHandler).GetUser`

#### Middlewares:

- `github.com/go-fuego/fuego.defaultLogger.middleware`

---


 * @summary get user
 */
export const gETUsersId = <TData = AxiosResponse<User>>(
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/users/${id}`,options
    );
  }

/**
 * #### Controller: 

`github.com/lighttiger2505/wakabata/internal/app.(*UserHandler).UpdateUser`

#### Middlewares:

- `github.com/go-fuego/fuego.defaultLogger.middleware`

---


 * @summary update user
 */
export const pUTUsersId = <TData = AxiosResponse<User>>(
    id: string,
    user: User, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.put(
      `/users/${id}`,
      user,options
    );
  }

export type GETTasksResult = AxiosResponse<Task[]>
export type POSTTasksResult = AxiosResponse<Task>
export type GETTasksIdResult = AxiosResponse<Task>
export type PUTTasksIdResult = AxiosResponse<Task>
export type GETUsersResult = AxiosResponse<User[]>
export type POSTUsersResult = AxiosResponse<User>
export type GETUsersIdResult = AxiosResponse<User>
export type PUTUsersIdResult = AxiosResponse<User>
