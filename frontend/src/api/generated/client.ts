/**
 * Generated by orval v7.5.0 üç∫
 * Do not edit manually.
 * OpenAPI
 * 
This is the autogenerated OpenAPI documentation for your [Fuego](https://github.com/go-fuego/fuego) API.

Below is a Fuego Cheatsheet to help you get started. Don't hesitate to check the [Fuego documentation](https://go-fuego.github.io/fuego) for more details.

Happy coding! üî•

## Usage

### Route registration

```go
func main() {
	// Create a new server
	s := fuego.NewServer()

	// Register some routes
	fuego.Post(s, "/hello", myController)
	fuego.Get(s, "/myPath", otherController)
	fuego.Put(s, "/hello", thirdController)

	adminRoutes := fuego.Group(s, "/admin")
	fuego.Use(adminRoutes, myMiddleware) // This middleware (for authentication, etc...) will be available for routes starting by /admin/*, 
	fuego.Get(adminRoutes, "/hello", groupController) // This route will be available at /admin/hello

	// Start the server
	s.Start()
}
```

### Basic controller

```go
type MyBody struct {
	Name string `json:"name" validate:"required,max=30"`
}

type MyResponse struct {
	Answer string `json:"answer"`
}

func hello(ctx fuego.ContextWithBody[MyBody]) (*MyResponse, error) {
	body, err := ctx.Body()
	if err != nil {
		return nil, err
	}

	return &MyResponse{Answer: "Hello " + body.Name}, nil
}
```

### Add openAPI information to the route

```go
import (
	"github.com/go-fuego/fuego"
	"github.com/go-fuego/fuego/option"
	"github.com/go-fuego/fuego/param"
)

func main() {
	s := fuego.NewServer()

	// Custom OpenAPI options
	fuego.Post(s, "/", myController
		option.Description("This route does something..."),
		option.Summary("This is my summary"),
		option.Tags("MyTag"), // A tag is set by default according to the return type (can be deactivated)
		option.Deprecated(), // Marks the route as deprecated in the OpenAPI spec

		option.Query("name", "Declares a query parameter with default value", param.Default("Carmack")),
		option.Header("Authorization", "Bearer token", param.Required()),
		optionPagination,
		optionCustomBehavior,
	)

	s.Run()
}

var optionPagination = option.Group(
	option.QueryInt("page", "Page number", param.Default(1), param.Example("1st page", 1), param.Example("42nd page", 42)),
	option.QueryInt("perPage", "Number of items per page"),
)

var optionCustomBehavior = func(r *fuego.BaseRoute) {
	r.XXX = "YYY"
}
```

Then, in the controller

```go
type MyResponse struct {
	Answer string `json:"answer"`
}

func getAllPets(ctx fuego.ContextNoBody) (*MyResponse, error) {
	name := ctx.QueryParam("name")
	perPage, _ := ctx.QueryParamIntErr("per_page")

	return &MyResponse{Answer: "Hello " + name}, nil
}
```

 * OpenAPI spec version: 0.0.1
 */
import useSwr from 'swr'
import type {
  Key,
  SWRConfiguration
} from 'swr'
import useSWRMutation from 'swr/mutation'
import type {
  SWRMutationConfiguration
} from 'swr/mutation'
import type {
  HTTPError,
  TaskToCreate,
  TaskToUpdate,
  UserToCreate
} from './model'
import {
  faker
} from '@faker-js/faker'
import {
  HttpResponse,
  delay,
  http
} from 'msw'
import type {
  Task,
  User
} from './model'
import { customInstance } from '../../lib/custom-instance';
import type { ErrorType, BodyType } from '../../lib/custom-instance';



  
  type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

/**
 * #### Controller: 

`github.com/lighttiger2505/wakabata/internal/app.(*TaskHandler).SearchTasks`

#### Middlewares:

- `github.com/go-fuego/fuego.defaultLogger.middleware`

---


 * @summary search tasks
 */
export const gETApiV1Tasks = (
    
 options?: SecondParameter<typeof customInstance>) => {
    return customInstance<Task[]>(
    {url: `/api/v1/tasks`, method: 'GET'
    },
    options);
  }



export const getGETApiV1TasksKey = () => [`/api/v1/tasks`] as const;

export type GETApiV1TasksQueryResult = NonNullable<Awaited<ReturnType<typeof gETApiV1Tasks>>>
export type GETApiV1TasksQueryError = ErrorType<HTTPError | void>

/**
 * @summary search tasks
 */
export const useGETApiV1Tasks = <TError = ErrorType<HTTPError | void>>(
   options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof gETApiV1Tasks>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof customInstance> }
) => {
  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGETApiV1TasksKey() : null);
  const swrFn = () => gETApiV1Tasks(requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * #### Controller: 

`github.com/lighttiger2505/wakabata/internal/app.(*TaskHandler).CreateTask`

#### Middlewares:

- `github.com/go-fuego/fuego.defaultLogger.middleware`

---


 * @summary create task
 */
export const pOSTApiV1Tasks = (
    taskToCreate: BodyType<TaskToCreate>,
 options?: SecondParameter<typeof customInstance>) => {
    return customInstance<Task>(
    {url: `/api/v1/tasks`, method: 'POST',
      headers: {'Content-Type': '*/*', },
      data: taskToCreate
    },
    options);
  }



export const getPOSTApiV1TasksMutationFetcher = ( options?: SecondParameter<typeof customInstance>) => {
  return (_: Key, { arg }: { arg: TaskToCreate }): Promise<Task> => {
    return pOSTApiV1Tasks(arg, options);
  }
}
export const getPOSTApiV1TasksMutationKey = () => [`/api/v1/tasks`] as const;

export type POSTApiV1TasksMutationResult = NonNullable<Awaited<ReturnType<typeof pOSTApiV1Tasks>>>
export type POSTApiV1TasksMutationError = ErrorType<HTTPError | void>

/**
 * @summary create task
 */
export const usePOSTApiV1Tasks = <TError = ErrorType<HTTPError | void>>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof pOSTApiV1Tasks>>, TError, Key, TaskToCreate, Awaited<ReturnType<typeof pOSTApiV1Tasks>>> & { swrKey?: string }, request?: SecondParameter<typeof customInstance>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getPOSTApiV1TasksMutationKey();
  const swrFn = getPOSTApiV1TasksMutationFetcher(requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * #### Controller: 

`github.com/lighttiger2505/wakabata/internal/app.(*TaskHandler).GetTask`

#### Middlewares:

- `github.com/go-fuego/fuego.defaultLogger.middleware`

---


 * @summary get task
 */
export const gETApiV1TasksId = (
    id: string,
 options?: SecondParameter<typeof customInstance>) => {
    return customInstance<Task>(
    {url: `/api/v1/tasks/${id}`, method: 'GET'
    },
    options);
  }



export const getGETApiV1TasksIdKey = (id: string,) => [`/api/v1/tasks/${id}`] as const;

export type GETApiV1TasksIdQueryResult = NonNullable<Awaited<ReturnType<typeof gETApiV1TasksId>>>
export type GETApiV1TasksIdQueryError = ErrorType<HTTPError | void>

/**
 * @summary get task
 */
export const useGETApiV1TasksId = <TError = ErrorType<HTTPError | void>>(
  id: string, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof gETApiV1TasksId>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof customInstance> }
) => {
  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(id)
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGETApiV1TasksIdKey(id) : null);
  const swrFn = () => gETApiV1TasksId(id, requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * #### Controller: 

`github.com/lighttiger2505/wakabata/internal/app.(*TaskHandler).UpdateTask`

#### Middlewares:

- `github.com/go-fuego/fuego.defaultLogger.middleware`

---


 * @summary update task
 */
export const pUTApiV1TasksId = (
    id: string,
    taskToUpdate: BodyType<TaskToUpdate>,
 options?: SecondParameter<typeof customInstance>) => {
    return customInstance<Task>(
    {url: `/api/v1/tasks/${id}`, method: 'PUT',
      headers: {'Content-Type': '*/*', },
      data: taskToUpdate
    },
    options);
  }



export const getPUTApiV1TasksIdMutationFetcher = (id: string, options?: SecondParameter<typeof customInstance>) => {
  return (_: Key, { arg }: { arg: TaskToUpdate }): Promise<Task> => {
    return pUTApiV1TasksId(id, arg, options);
  }
}
export const getPUTApiV1TasksIdMutationKey = (id: string,) => [`/api/v1/tasks/${id}`] as const;

export type PUTApiV1TasksIdMutationResult = NonNullable<Awaited<ReturnType<typeof pUTApiV1TasksId>>>
export type PUTApiV1TasksIdMutationError = ErrorType<HTTPError | void>

/**
 * @summary update task
 */
export const usePUTApiV1TasksId = <TError = ErrorType<HTTPError | void>>(
  id: string, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof pUTApiV1TasksId>>, TError, Key, TaskToUpdate, Awaited<ReturnType<typeof pUTApiV1TasksId>>> & { swrKey?: string }, request?: SecondParameter<typeof customInstance>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getPUTApiV1TasksIdMutationKey(id);
  const swrFn = getPUTApiV1TasksIdMutationFetcher(id, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * #### Controller: 

`github.com/lighttiger2505/wakabata/internal/app.(*UserHandler).SearchUsers`

#### Middlewares:

- `github.com/go-fuego/fuego.defaultLogger.middleware`

---


 * @summary search users
 */
export const gETApiV1Users = (
    
 options?: SecondParameter<typeof customInstance>) => {
    return customInstance<User[]>(
    {url: `/api/v1/users`, method: 'GET'
    },
    options);
  }



export const getGETApiV1UsersKey = () => [`/api/v1/users`] as const;

export type GETApiV1UsersQueryResult = NonNullable<Awaited<ReturnType<typeof gETApiV1Users>>>
export type GETApiV1UsersQueryError = ErrorType<HTTPError | void>

/**
 * @summary search users
 */
export const useGETApiV1Users = <TError = ErrorType<HTTPError | void>>(
   options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof gETApiV1Users>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof customInstance> }
) => {
  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGETApiV1UsersKey() : null);
  const swrFn = () => gETApiV1Users(requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * #### Controller: 

`github.com/lighttiger2505/wakabata/internal/app.(*UserHandler).CreateUser`

#### Middlewares:

- `github.com/go-fuego/fuego.defaultLogger.middleware`

---


 * @summary create user
 */
export const pOSTApiV1Users = (
    userToCreate: BodyType<UserToCreate>,
 options?: SecondParameter<typeof customInstance>) => {
    return customInstance<User>(
    {url: `/api/v1/users`, method: 'POST',
      headers: {'Content-Type': '*/*', },
      data: userToCreate
    },
    options);
  }



export const getPOSTApiV1UsersMutationFetcher = ( options?: SecondParameter<typeof customInstance>) => {
  return (_: Key, { arg }: { arg: UserToCreate }): Promise<User> => {
    return pOSTApiV1Users(arg, options);
  }
}
export const getPOSTApiV1UsersMutationKey = () => [`/api/v1/users`] as const;

export type POSTApiV1UsersMutationResult = NonNullable<Awaited<ReturnType<typeof pOSTApiV1Users>>>
export type POSTApiV1UsersMutationError = ErrorType<HTTPError | void>

/**
 * @summary create user
 */
export const usePOSTApiV1Users = <TError = ErrorType<HTTPError | void>>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof pOSTApiV1Users>>, TError, Key, UserToCreate, Awaited<ReturnType<typeof pOSTApiV1Users>>> & { swrKey?: string }, request?: SecondParameter<typeof customInstance>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getPOSTApiV1UsersMutationKey();
  const swrFn = getPOSTApiV1UsersMutationFetcher(requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * #### Controller: 

`github.com/lighttiger2505/wakabata/internal/app.(*UserHandler).GetUser`

#### Middlewares:

- `github.com/go-fuego/fuego.defaultLogger.middleware`

---


 * @summary get user
 */
export const gETApiV1UsersId = (
    id: string,
 options?: SecondParameter<typeof customInstance>) => {
    return customInstance<User>(
    {url: `/api/v1/users/${id}`, method: 'GET'
    },
    options);
  }



export const getGETApiV1UsersIdKey = (id: string,) => [`/api/v1/users/${id}`] as const;

export type GETApiV1UsersIdQueryResult = NonNullable<Awaited<ReturnType<typeof gETApiV1UsersId>>>
export type GETApiV1UsersIdQueryError = ErrorType<HTTPError | void>

/**
 * @summary get user
 */
export const useGETApiV1UsersId = <TError = ErrorType<HTTPError | void>>(
  id: string, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof gETApiV1UsersId>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof customInstance> }
) => {
  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(id)
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGETApiV1UsersIdKey(id) : null);
  const swrFn = () => gETApiV1UsersId(id, requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * #### Controller: 

`github.com/lighttiger2505/wakabata/internal/app.(*UserHandler).UpdateUser`

#### Middlewares:

- `github.com/go-fuego/fuego.defaultLogger.middleware`

---


 * @summary update user
 */
export const pUTApiV1UsersId = (
    id: string,
    user: BodyType<User>,
 options?: SecondParameter<typeof customInstance>) => {
    return customInstance<User>(
    {url: `/api/v1/users/${id}`, method: 'PUT',
      headers: {'Content-Type': '*/*', },
      data: user
    },
    options);
  }



export const getPUTApiV1UsersIdMutationFetcher = (id: string, options?: SecondParameter<typeof customInstance>) => {
  return (_: Key, { arg }: { arg: User }): Promise<User> => {
    return pUTApiV1UsersId(id, arg, options);
  }
}
export const getPUTApiV1UsersIdMutationKey = (id: string,) => [`/api/v1/users/${id}`] as const;

export type PUTApiV1UsersIdMutationResult = NonNullable<Awaited<ReturnType<typeof pUTApiV1UsersId>>>
export type PUTApiV1UsersIdMutationError = ErrorType<HTTPError | void>

/**
 * @summary update user
 */
export const usePUTApiV1UsersId = <TError = ErrorType<HTTPError | void>>(
  id: string, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof pUTApiV1UsersId>>, TError, Key, User, Awaited<ReturnType<typeof pUTApiV1UsersId>>> & { swrKey?: string }, request?: SecondParameter<typeof customInstance>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getPUTApiV1UsersIdMutationKey(id);
  const swrFn = getPUTApiV1UsersIdMutationFetcher(id, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}



export const getGETApiV1TasksResponseMock = (): Task[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created_at: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), due_date: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), priority: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), project_id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), status: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), updated_at: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined])})))

export const getPOSTApiV1TasksResponseMock = (overrideResponse: Partial< Task > = {}): Task => ({created_at: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), due_date: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), priority: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), project_id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), status: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), updated_at: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), ...overrideResponse})

export const getGETApiV1TasksIdResponseMock = (overrideResponse: Partial< Task > = {}): Task => ({created_at: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), due_date: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), priority: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), project_id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), status: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), updated_at: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), ...overrideResponse})

export const getPUTApiV1TasksIdResponseMock = (overrideResponse: Partial< Task > = {}): Task => ({created_at: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), due_date: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), priority: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), project_id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), status: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), updated_at: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), ...overrideResponse})

export const getGETApiV1UsersResponseMock = (): User[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created_at: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), email: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), password_hash: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), updated_at: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), username: faker.helpers.arrayElement([faker.string.alpha(20), undefined])})))

export const getPOSTApiV1UsersResponseMock = (overrideResponse: Partial< User > = {}): User => ({created_at: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), email: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), password_hash: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), updated_at: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), username: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), ...overrideResponse})

export const getGETApiV1UsersIdResponseMock = (overrideResponse: Partial< User > = {}): User => ({created_at: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), email: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), password_hash: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), updated_at: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), username: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), ...overrideResponse})

export const getPUTApiV1UsersIdResponseMock = (overrideResponse: Partial< User > = {}): User => ({created_at: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), email: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), password_hash: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), updated_at: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), username: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), ...overrideResponse})


export const getGETApiV1TasksMockHandler = (overrideResponse?: Task[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<Task[]> | Task[])) => {
  return http.get('*/api/v1/tasks', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGETApiV1TasksResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPOSTApiV1TasksMockHandler = (overrideResponse?: Task | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<Task> | Task)) => {
  return http.post('*/api/v1/tasks', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getPOSTApiV1TasksResponseMock()),
      { status: 201,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGETApiV1TasksIdMockHandler = (overrideResponse?: Task | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<Task> | Task)) => {
  return http.get('*/api/v1/tasks/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGETApiV1TasksIdResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPUTApiV1TasksIdMockHandler = (overrideResponse?: Task | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<Task> | Task)) => {
  return http.put('*/api/v1/tasks/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getPUTApiV1TasksIdResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGETApiV1UsersMockHandler = (overrideResponse?: User[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<User[]> | User[])) => {
  return http.get('*/api/v1/users', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGETApiV1UsersResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPOSTApiV1UsersMockHandler = (overrideResponse?: User | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<User> | User)) => {
  return http.post('*/api/v1/users', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getPOSTApiV1UsersResponseMock()),
      { status: 201,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGETApiV1UsersIdMockHandler = (overrideResponse?: User | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<User> | User)) => {
  return http.get('*/api/v1/users/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGETApiV1UsersIdResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPUTApiV1UsersIdMockHandler = (overrideResponse?: User | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<User> | User)) => {
  return http.put('*/api/v1/users/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getPUTApiV1UsersIdResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}
export const getOpenAPIMock = () => [
  getGETApiV1TasksMockHandler(),
  getPOSTApiV1TasksMockHandler(),
  getGETApiV1TasksIdMockHandler(),
  getPUTApiV1TasksIdMockHandler(),
  getGETApiV1UsersMockHandler(),
  getPOSTApiV1UsersMockHandler(),
  getGETApiV1UsersIdMockHandler(),
  getPUTApiV1UsersIdMockHandler()
]
