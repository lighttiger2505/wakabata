/**
 * Generated by orval v7.5.0 üç∫
 * Do not edit manually.
 * OpenAPI
 * wakabata API
 * OpenAPI spec version: 0.0.1
 */
import useSwr from 'swr'
import type {
  Arguments,
  Key,
  SWRConfiguration
} from 'swr'
import useSWRMutation from 'swr/mutation'
import type {
  SWRMutationConfiguration
} from 'swr/mutation'
import type {
  HTTPError,
  LoginRequest,
  ProjectToCreate,
  ProjectToUpdate,
  RefreshTokenRequest,
  TaskToCreate,
  TaskToUpdate,
  UserToCreate
} from './model'
import {
  faker
} from '@faker-js/faker'
import {
  HttpResponse,
  delay,
  http
} from 'msw'
import type {
  Project,
  String,
  Task,
  TokenPair,
  UnknownInterface,
  User
} from './model'
import { customInstance } from '../../lib/custom-instance';
import type { ErrorType, BodyType } from '../../lib/custom-instance';



  
  type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

/**
 * #### Controller: 

`github.com/lighttiger2505/wakabata/internal/app.(*AuthHandler).Login`

#### Middlewares:

- `github.com/go-fuego/fuego.defaultLogger.middleware`

---


 * @summary login
 */
export const pOSTApiV1AuthLogin = (
    loginRequest: BodyType<LoginRequest>,
 options?: SecondParameter<typeof customInstance>) => {
    return customInstance<TokenPair>(
    {url: `/api/v1/auth/login`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: loginRequest
    },
    options);
  }



export const getPOSTApiV1AuthLoginMutationFetcher = ( options?: SecondParameter<typeof customInstance>) => {
  return (_: Key, { arg }: { arg: LoginRequest }): Promise<TokenPair> => {
    return pOSTApiV1AuthLogin(arg, options);
  }
}
export const getPOSTApiV1AuthLoginMutationKey = () => [`/api/v1/auth/login`] as const;

export type POSTApiV1AuthLoginMutationResult = NonNullable<Awaited<ReturnType<typeof pOSTApiV1AuthLogin>>>
export type POSTApiV1AuthLoginMutationError = ErrorType<HTTPError | void>

/**
 * @summary login
 */
export const usePOSTApiV1AuthLogin = <TError = ErrorType<HTTPError | void>>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof pOSTApiV1AuthLogin>>, TError, Key, LoginRequest, Awaited<ReturnType<typeof pOSTApiV1AuthLogin>>> & { swrKey?: string }, request?: SecondParameter<typeof customInstance>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getPOSTApiV1AuthLoginMutationKey();
  const swrFn = getPOSTApiV1AuthLoginMutationFetcher(requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * #### Controller: 

`github.com/lighttiger2505/wakabata/internal/app.(*AuthHandler).RefreshToken`

#### Middlewares:

- `github.com/go-fuego/fuego.defaultLogger.middleware`

---


 * @summary refresh token
 */
export const pOSTApiV1AuthRefresh = (
    refreshTokenRequest: BodyType<RefreshTokenRequest>,
 options?: SecondParameter<typeof customInstance>) => {
    return customInstance<TokenPair>(
    {url: `/api/v1/auth/refresh`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: refreshTokenRequest
    },
    options);
  }



export const getPOSTApiV1AuthRefreshMutationFetcher = ( options?: SecondParameter<typeof customInstance>) => {
  return (_: Key, { arg }: { arg: RefreshTokenRequest }): Promise<TokenPair> => {
    return pOSTApiV1AuthRefresh(arg, options);
  }
}
export const getPOSTApiV1AuthRefreshMutationKey = () => [`/api/v1/auth/refresh`] as const;

export type POSTApiV1AuthRefreshMutationResult = NonNullable<Awaited<ReturnType<typeof pOSTApiV1AuthRefresh>>>
export type POSTApiV1AuthRefreshMutationError = ErrorType<HTTPError | void>

/**
 * @summary refresh token
 */
export const usePOSTApiV1AuthRefresh = <TError = ErrorType<HTTPError | void>>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof pOSTApiV1AuthRefresh>>, TError, Key, RefreshTokenRequest, Awaited<ReturnType<typeof pOSTApiV1AuthRefresh>>> & { swrKey?: string }, request?: SecondParameter<typeof customInstance>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getPOSTApiV1AuthRefreshMutationKey();
  const swrFn = getPOSTApiV1AuthRefreshMutationFetcher(requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * #### Controller: 

`github.com/lighttiger2505/wakabata/internal/app.(*ProjectHandler).SearchProjects`

#### Middlewares:

- `github.com/go-fuego/fuego.defaultLogger.middleware`

---


 * @summary search projects
 */
export const gETApiV1Projects = (
    
 options?: SecondParameter<typeof customInstance>) => {
    return customInstance<Project[]>(
    {url: `/api/v1/projects`, method: 'GET'
    },
    options);
  }



export const getGETApiV1ProjectsKey = () => [`/api/v1/projects`] as const;

export type GETApiV1ProjectsQueryResult = NonNullable<Awaited<ReturnType<typeof gETApiV1Projects>>>
export type GETApiV1ProjectsQueryError = ErrorType<HTTPError | void>

/**
 * @summary search projects
 */
export const useGETApiV1Projects = <TError = ErrorType<HTTPError | void>>(
   options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof gETApiV1Projects>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof customInstance> }
) => {
  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGETApiV1ProjectsKey() : null);
  const swrFn = () => gETApiV1Projects(requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * #### Controller: 

`github.com/lighttiger2505/wakabata/internal/app.(*ProjectHandler).CreateProject`

#### Middlewares:

- `github.com/go-fuego/fuego.defaultLogger.middleware`

---


 * @summary create project
 */
export const pOSTApiV1Projects = (
    projectToCreate: BodyType<ProjectToCreate>,
 options?: SecondParameter<typeof customInstance>) => {
    return customInstance<Project>(
    {url: `/api/v1/projects`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: projectToCreate
    },
    options);
  }



export const getPOSTApiV1ProjectsMutationFetcher = ( options?: SecondParameter<typeof customInstance>) => {
  return (_: Key, { arg }: { arg: ProjectToCreate }): Promise<Project> => {
    return pOSTApiV1Projects(arg, options);
  }
}
export const getPOSTApiV1ProjectsMutationKey = () => [`/api/v1/projects`] as const;

export type POSTApiV1ProjectsMutationResult = NonNullable<Awaited<ReturnType<typeof pOSTApiV1Projects>>>
export type POSTApiV1ProjectsMutationError = ErrorType<HTTPError | void>

/**
 * @summary create project
 */
export const usePOSTApiV1Projects = <TError = ErrorType<HTTPError | void>>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof pOSTApiV1Projects>>, TError, Key, ProjectToCreate, Awaited<ReturnType<typeof pOSTApiV1Projects>>> & { swrKey?: string }, request?: SecondParameter<typeof customInstance>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getPOSTApiV1ProjectsMutationKey();
  const swrFn = getPOSTApiV1ProjectsMutationFetcher(requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * #### Controller: 

`github.com/lighttiger2505/wakabata/internal/app.(*ProjectHandler).DeleteProject`

#### Middlewares:

- `github.com/go-fuego/fuego.defaultLogger.middleware`

---


 * @summary delete project
 */
export const dELETEApiV1ProjectsId = (
    id: string,
 options?: SecondParameter<typeof customInstance>) => {
    return customInstance<UnknownInterface>(
    {url: `/api/v1/projects/${id}`, method: 'DELETE'
    },
    options);
  }



export const getDELETEApiV1ProjectsIdMutationFetcher = (id: string, options?: SecondParameter<typeof customInstance>) => {
  return (_: Key, __: { arg: Arguments }): Promise<UnknownInterface> => {
    return dELETEApiV1ProjectsId(id, options);
  }
}
export const getDELETEApiV1ProjectsIdMutationKey = (id: string,) => [`/api/v1/projects/${id}`] as const;

export type DELETEApiV1ProjectsIdMutationResult = NonNullable<Awaited<ReturnType<typeof dELETEApiV1ProjectsId>>>
export type DELETEApiV1ProjectsIdMutationError = ErrorType<HTTPError | void>

/**
 * @summary delete project
 */
export const useDELETEApiV1ProjectsId = <TError = ErrorType<HTTPError | void>>(
  id: string, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof dELETEApiV1ProjectsId>>, TError, Key, Arguments, Awaited<ReturnType<typeof dELETEApiV1ProjectsId>>> & { swrKey?: string }, request?: SecondParameter<typeof customInstance>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getDELETEApiV1ProjectsIdMutationKey(id);
  const swrFn = getDELETEApiV1ProjectsIdMutationFetcher(id, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * #### Controller: 

`github.com/lighttiger2505/wakabata/internal/app.(*ProjectHandler).GetProject`

#### Middlewares:

- `github.com/go-fuego/fuego.defaultLogger.middleware`

---


 * @summary get project
 */
export const gETApiV1ProjectsId = (
    id: string,
 options?: SecondParameter<typeof customInstance>) => {
    return customInstance<Project>(
    {url: `/api/v1/projects/${id}`, method: 'GET'
    },
    options);
  }



export const getGETApiV1ProjectsIdKey = (id: string,) => [`/api/v1/projects/${id}`] as const;

export type GETApiV1ProjectsIdQueryResult = NonNullable<Awaited<ReturnType<typeof gETApiV1ProjectsId>>>
export type GETApiV1ProjectsIdQueryError = ErrorType<HTTPError | void>

/**
 * @summary get project
 */
export const useGETApiV1ProjectsId = <TError = ErrorType<HTTPError | void>>(
  id: string, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof gETApiV1ProjectsId>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof customInstance> }
) => {
  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(id)
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGETApiV1ProjectsIdKey(id) : null);
  const swrFn = () => gETApiV1ProjectsId(id, requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * #### Controller: 

`github.com/lighttiger2505/wakabata/internal/app.(*ProjectHandler).UpdateProject`

#### Middlewares:

- `github.com/go-fuego/fuego.defaultLogger.middleware`

---


 * @summary update project
 */
export const pUTApiV1ProjectsId = (
    id: string,
    projectToUpdate: BodyType<ProjectToUpdate>,
 options?: SecondParameter<typeof customInstance>) => {
    return customInstance<Project>(
    {url: `/api/v1/projects/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: projectToUpdate
    },
    options);
  }



export const getPUTApiV1ProjectsIdMutationFetcher = (id: string, options?: SecondParameter<typeof customInstance>) => {
  return (_: Key, { arg }: { arg: ProjectToUpdate }): Promise<Project> => {
    return pUTApiV1ProjectsId(id, arg, options);
  }
}
export const getPUTApiV1ProjectsIdMutationKey = (id: string,) => [`/api/v1/projects/${id}`] as const;

export type PUTApiV1ProjectsIdMutationResult = NonNullable<Awaited<ReturnType<typeof pUTApiV1ProjectsId>>>
export type PUTApiV1ProjectsIdMutationError = ErrorType<HTTPError | void>

/**
 * @summary update project
 */
export const usePUTApiV1ProjectsId = <TError = ErrorType<HTTPError | void>>(
  id: string, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof pUTApiV1ProjectsId>>, TError, Key, ProjectToUpdate, Awaited<ReturnType<typeof pUTApiV1ProjectsId>>> & { swrKey?: string }, request?: SecondParameter<typeof customInstance>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getPUTApiV1ProjectsIdMutationKey(id);
  const swrFn = getPUTApiV1ProjectsIdMutationFetcher(id, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * #### Controller: 

`github.com/lighttiger2505/wakabata/internal/app.(*TaskHandler).SearchTasks`

#### Middlewares:

- `github.com/go-fuego/fuego.defaultLogger.middleware`

---


 * @summary search tasks
 */
export const gETApiV1Tasks = (
    
 options?: SecondParameter<typeof customInstance>) => {
    return customInstance<Task[]>(
    {url: `/api/v1/tasks`, method: 'GET'
    },
    options);
  }



export const getGETApiV1TasksKey = () => [`/api/v1/tasks`] as const;

export type GETApiV1TasksQueryResult = NonNullable<Awaited<ReturnType<typeof gETApiV1Tasks>>>
export type GETApiV1TasksQueryError = ErrorType<HTTPError | void>

/**
 * @summary search tasks
 */
export const useGETApiV1Tasks = <TError = ErrorType<HTTPError | void>>(
   options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof gETApiV1Tasks>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof customInstance> }
) => {
  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGETApiV1TasksKey() : null);
  const swrFn = () => gETApiV1Tasks(requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * #### Controller: 

`github.com/lighttiger2505/wakabata/internal/app.(*TaskHandler).CreateTask`

#### Middlewares:

- `github.com/go-fuego/fuego.defaultLogger.middleware`

---


 * @summary create task
 */
export const pOSTApiV1Tasks = (
    taskToCreate: BodyType<TaskToCreate>,
 options?: SecondParameter<typeof customInstance>) => {
    return customInstance<Task>(
    {url: `/api/v1/tasks`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: taskToCreate
    },
    options);
  }



export const getPOSTApiV1TasksMutationFetcher = ( options?: SecondParameter<typeof customInstance>) => {
  return (_: Key, { arg }: { arg: TaskToCreate }): Promise<Task> => {
    return pOSTApiV1Tasks(arg, options);
  }
}
export const getPOSTApiV1TasksMutationKey = () => [`/api/v1/tasks`] as const;

export type POSTApiV1TasksMutationResult = NonNullable<Awaited<ReturnType<typeof pOSTApiV1Tasks>>>
export type POSTApiV1TasksMutationError = ErrorType<HTTPError | void>

/**
 * @summary create task
 */
export const usePOSTApiV1Tasks = <TError = ErrorType<HTTPError | void>>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof pOSTApiV1Tasks>>, TError, Key, TaskToCreate, Awaited<ReturnType<typeof pOSTApiV1Tasks>>> & { swrKey?: string }, request?: SecondParameter<typeof customInstance>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getPOSTApiV1TasksMutationKey();
  const swrFn = getPOSTApiV1TasksMutationFetcher(requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * #### Controller: 

`github.com/lighttiger2505/wakabata/internal/app.(*TaskHandler).DeleteTask`

#### Middlewares:

- `github.com/go-fuego/fuego.defaultLogger.middleware`

---


 * @summary delete task
 */
export const dELETEApiV1TasksId = (
    id: string,
 options?: SecondParameter<typeof customInstance>) => {
    return customInstance<UnknownInterface>(
    {url: `/api/v1/tasks/${id}`, method: 'DELETE'
    },
    options);
  }



export const getDELETEApiV1TasksIdMutationFetcher = (id: string, options?: SecondParameter<typeof customInstance>) => {
  return (_: Key, __: { arg: Arguments }): Promise<UnknownInterface> => {
    return dELETEApiV1TasksId(id, options);
  }
}
export const getDELETEApiV1TasksIdMutationKey = (id: string,) => [`/api/v1/tasks/${id}`] as const;

export type DELETEApiV1TasksIdMutationResult = NonNullable<Awaited<ReturnType<typeof dELETEApiV1TasksId>>>
export type DELETEApiV1TasksIdMutationError = ErrorType<HTTPError | void>

/**
 * @summary delete task
 */
export const useDELETEApiV1TasksId = <TError = ErrorType<HTTPError | void>>(
  id: string, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof dELETEApiV1TasksId>>, TError, Key, Arguments, Awaited<ReturnType<typeof dELETEApiV1TasksId>>> & { swrKey?: string }, request?: SecondParameter<typeof customInstance>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getDELETEApiV1TasksIdMutationKey(id);
  const swrFn = getDELETEApiV1TasksIdMutationFetcher(id, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * #### Controller: 

`github.com/lighttiger2505/wakabata/internal/app.(*TaskHandler).GetTask`

#### Middlewares:

- `github.com/go-fuego/fuego.defaultLogger.middleware`

---


 * @summary get task
 */
export const gETApiV1TasksId = (
    id: string,
 options?: SecondParameter<typeof customInstance>) => {
    return customInstance<Task>(
    {url: `/api/v1/tasks/${id}`, method: 'GET'
    },
    options);
  }



export const getGETApiV1TasksIdKey = (id: string,) => [`/api/v1/tasks/${id}`] as const;

export type GETApiV1TasksIdQueryResult = NonNullable<Awaited<ReturnType<typeof gETApiV1TasksId>>>
export type GETApiV1TasksIdQueryError = ErrorType<HTTPError | void>

/**
 * @summary get task
 */
export const useGETApiV1TasksId = <TError = ErrorType<HTTPError | void>>(
  id: string, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof gETApiV1TasksId>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof customInstance> }
) => {
  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(id)
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGETApiV1TasksIdKey(id) : null);
  const swrFn = () => gETApiV1TasksId(id, requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * #### Controller: 

`github.com/lighttiger2505/wakabata/internal/app.(*TaskHandler).UpdateTask`

#### Middlewares:

- `github.com/go-fuego/fuego.defaultLogger.middleware`

---


 * @summary update task
 */
export const pUTApiV1TasksId = (
    id: string,
    taskToUpdate: BodyType<TaskToUpdate>,
 options?: SecondParameter<typeof customInstance>) => {
    return customInstance<Task>(
    {url: `/api/v1/tasks/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: taskToUpdate
    },
    options);
  }



export const getPUTApiV1TasksIdMutationFetcher = (id: string, options?: SecondParameter<typeof customInstance>) => {
  return (_: Key, { arg }: { arg: TaskToUpdate }): Promise<Task> => {
    return pUTApiV1TasksId(id, arg, options);
  }
}
export const getPUTApiV1TasksIdMutationKey = (id: string,) => [`/api/v1/tasks/${id}`] as const;

export type PUTApiV1TasksIdMutationResult = NonNullable<Awaited<ReturnType<typeof pUTApiV1TasksId>>>
export type PUTApiV1TasksIdMutationError = ErrorType<HTTPError | void>

/**
 * @summary update task
 */
export const usePUTApiV1TasksId = <TError = ErrorType<HTTPError | void>>(
  id: string, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof pUTApiV1TasksId>>, TError, Key, TaskToUpdate, Awaited<ReturnType<typeof pUTApiV1TasksId>>> & { swrKey?: string }, request?: SecondParameter<typeof customInstance>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getPUTApiV1TasksIdMutationKey(id);
  const swrFn = getPUTApiV1TasksIdMutationFetcher(id, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * #### Controller: 

`github.com/lighttiger2505/wakabata/internal/app.(*UserHandler).SearchUsers`

#### Middlewares:

- `github.com/go-fuego/fuego.defaultLogger.middleware`

---


 * @summary search users
 */
export const gETApiV1Users = (
    
 options?: SecondParameter<typeof customInstance>) => {
    return customInstance<User[]>(
    {url: `/api/v1/users`, method: 'GET'
    },
    options);
  }



export const getGETApiV1UsersKey = () => [`/api/v1/users`] as const;

export type GETApiV1UsersQueryResult = NonNullable<Awaited<ReturnType<typeof gETApiV1Users>>>
export type GETApiV1UsersQueryError = ErrorType<HTTPError | void>

/**
 * @summary search users
 */
export const useGETApiV1Users = <TError = ErrorType<HTTPError | void>>(
   options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof gETApiV1Users>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof customInstance> }
) => {
  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGETApiV1UsersKey() : null);
  const swrFn = () => gETApiV1Users(requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * #### Controller: 

`github.com/lighttiger2505/wakabata/internal/app.(*UserHandler).CreateUser`

#### Middlewares:

- `github.com/go-fuego/fuego.defaultLogger.middleware`

---


 * @summary create user
 */
export const pOSTApiV1Users = (
    userToCreate: BodyType<UserToCreate>,
 options?: SecondParameter<typeof customInstance>) => {
    return customInstance<User>(
    {url: `/api/v1/users`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: userToCreate
    },
    options);
  }



export const getPOSTApiV1UsersMutationFetcher = ( options?: SecondParameter<typeof customInstance>) => {
  return (_: Key, { arg }: { arg: UserToCreate }): Promise<User> => {
    return pOSTApiV1Users(arg, options);
  }
}
export const getPOSTApiV1UsersMutationKey = () => [`/api/v1/users`] as const;

export type POSTApiV1UsersMutationResult = NonNullable<Awaited<ReturnType<typeof pOSTApiV1Users>>>
export type POSTApiV1UsersMutationError = ErrorType<HTTPError | void>

/**
 * @summary create user
 */
export const usePOSTApiV1Users = <TError = ErrorType<HTTPError | void>>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof pOSTApiV1Users>>, TError, Key, UserToCreate, Awaited<ReturnType<typeof pOSTApiV1Users>>> & { swrKey?: string }, request?: SecondParameter<typeof customInstance>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getPOSTApiV1UsersMutationKey();
  const swrFn = getPOSTApiV1UsersMutationFetcher(requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * #### Controller: 

`github.com/lighttiger2505/wakabata/internal/app.(*UserHandler).GetUser`

#### Middlewares:

- `github.com/go-fuego/fuego.defaultLogger.middleware`

---


 * @summary get user
 */
export const gETApiV1UsersId = (
    id: string,
 options?: SecondParameter<typeof customInstance>) => {
    return customInstance<User>(
    {url: `/api/v1/users/${id}`, method: 'GET'
    },
    options);
  }



export const getGETApiV1UsersIdKey = (id: string,) => [`/api/v1/users/${id}`] as const;

export type GETApiV1UsersIdQueryResult = NonNullable<Awaited<ReturnType<typeof gETApiV1UsersId>>>
export type GETApiV1UsersIdQueryError = ErrorType<HTTPError | void>

/**
 * @summary get user
 */
export const useGETApiV1UsersId = <TError = ErrorType<HTTPError | void>>(
  id: string, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof gETApiV1UsersId>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof customInstance> }
) => {
  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(id)
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGETApiV1UsersIdKey(id) : null);
  const swrFn = () => gETApiV1UsersId(id, requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * #### Controller: 

`github.com/lighttiger2505/wakabata/internal/app.(*UserHandler).UpdateUser`

#### Middlewares:

- `github.com/go-fuego/fuego.defaultLogger.middleware`

---


 * @summary update user
 */
export const pUTApiV1UsersId = (
    id: string,
    user: BodyType<User>,
 options?: SecondParameter<typeof customInstance>) => {
    return customInstance<User>(
    {url: `/api/v1/users/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: user
    },
    options);
  }



export const getPUTApiV1UsersIdMutationFetcher = (id: string, options?: SecondParameter<typeof customInstance>) => {
  return (_: Key, { arg }: { arg: User }): Promise<User> => {
    return pUTApiV1UsersId(id, arg, options);
  }
}
export const getPUTApiV1UsersIdMutationKey = (id: string,) => [`/api/v1/users/${id}`] as const;

export type PUTApiV1UsersIdMutationResult = NonNullable<Awaited<ReturnType<typeof pUTApiV1UsersId>>>
export type PUTApiV1UsersIdMutationError = ErrorType<HTTPError | void>

/**
 * @summary update user
 */
export const usePUTApiV1UsersId = <TError = ErrorType<HTTPError | void>>(
  id: string, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof pUTApiV1UsersId>>, TError, Key, User, Awaited<ReturnType<typeof pUTApiV1UsersId>>> & { swrKey?: string }, request?: SecondParameter<typeof customInstance>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getPUTApiV1UsersIdMutationKey(id);
  const swrFn = getPUTApiV1UsersIdMutationFetcher(id, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * #### Controller: 

`main.main.func1`

#### Middlewares:

- `github.com/go-fuego/fuego.defaultLogger.middleware`

---


 * @summary func1
 */
export const gETHealth = (
    
 options?: SecondParameter<typeof customInstance>) => {
    return customInstance<String>(
    {url: `/health`, method: 'GET'
    },
    options);
  }



export const getGETHealthKey = () => [`/health`] as const;

export type GETHealthQueryResult = NonNullable<Awaited<ReturnType<typeof gETHealth>>>
export type GETHealthQueryError = ErrorType<HTTPError | void>

/**
 * @summary func1
 */
export const useGETHealth = <TError = ErrorType<HTTPError | void>>(
   options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof gETHealth>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof customInstance> }
) => {
  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGETHealthKey() : null);
  const swrFn = () => gETHealth(requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}



export const getPOSTApiV1AuthLoginResponseMock = (overrideResponse: Partial< TokenPair > = {}): TokenPair => ({access_token: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), refresh_token: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), ...overrideResponse})

export const getPOSTApiV1AuthRefreshResponseMock = (overrideResponse: Partial< TokenPair > = {}): TokenPair => ({access_token: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), refresh_token: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), ...overrideResponse})

export const getGETApiV1ProjectsResponseMock = (): Project[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created_at: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), updated_at: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), user_id: faker.helpers.arrayElement([faker.string.alpha(20), undefined])})))

export const getPOSTApiV1ProjectsResponseMock = (overrideResponse: Partial< Project > = {}): Project => ({created_at: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), updated_at: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), user_id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), ...overrideResponse})

export const getDELETEApiV1ProjectsIdResponseMock = (): UnknownInterface => ({})

export const getGETApiV1ProjectsIdResponseMock = (overrideResponse: Partial< Project > = {}): Project => ({created_at: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), updated_at: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), user_id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), ...overrideResponse})

export const getPUTApiV1ProjectsIdResponseMock = (overrideResponse: Partial< Project > = {}): Project => ({created_at: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), updated_at: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), user_id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), ...overrideResponse})

export const getGETApiV1TasksResponseMock = (): Task[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created_at: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), due_date: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), priority: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), project_id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), project_name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), status: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), updated_at: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined])})))

export const getPOSTApiV1TasksResponseMock = (overrideResponse: Partial< Task > = {}): Task => ({created_at: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), due_date: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), priority: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), project_id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), project_name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), status: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), updated_at: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), ...overrideResponse})

export const getDELETEApiV1TasksIdResponseMock = (): UnknownInterface => ({})

export const getGETApiV1TasksIdResponseMock = (overrideResponse: Partial< Task > = {}): Task => ({created_at: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), due_date: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), priority: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), project_id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), project_name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), status: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), updated_at: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), ...overrideResponse})

export const getPUTApiV1TasksIdResponseMock = (overrideResponse: Partial< Task > = {}): Task => ({created_at: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), due_date: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), priority: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), project_id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), project_name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), status: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), updated_at: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), ...overrideResponse})

export const getGETApiV1UsersResponseMock = (): User[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created_at: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), email: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), is_email_verified: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), password_hash: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), totp_secret: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), updated_at: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined])})))

export const getPOSTApiV1UsersResponseMock = (overrideResponse: Partial< User > = {}): User => ({created_at: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), email: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), is_email_verified: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), password_hash: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), totp_secret: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), updated_at: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), ...overrideResponse})

export const getGETApiV1UsersIdResponseMock = (overrideResponse: Partial< User > = {}): User => ({created_at: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), email: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), is_email_verified: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), password_hash: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), totp_secret: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), updated_at: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), ...overrideResponse})

export const getPUTApiV1UsersIdResponseMock = (overrideResponse: Partial< User > = {}): User => ({created_at: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), email: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), is_email_verified: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), password_hash: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), totp_secret: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), updated_at: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), ...overrideResponse})

export const getGETHealthResponseMock = (): String => (faker.string.alpha(20))


export const getPOSTApiV1AuthLoginMockHandler = (overrideResponse?: TokenPair | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<TokenPair> | TokenPair)) => {
  return http.post('*/api/v1/auth/login', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getPOSTApiV1AuthLoginResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPOSTApiV1AuthRefreshMockHandler = (overrideResponse?: TokenPair | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<TokenPair> | TokenPair)) => {
  return http.post('*/api/v1/auth/refresh', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getPOSTApiV1AuthRefreshResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGETApiV1ProjectsMockHandler = (overrideResponse?: Project[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<Project[]> | Project[])) => {
  return http.get('*/api/v1/projects', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGETApiV1ProjectsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPOSTApiV1ProjectsMockHandler = (overrideResponse?: Project | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<Project> | Project)) => {
  return http.post('*/api/v1/projects', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getPOSTApiV1ProjectsResponseMock()),
      { status: 201,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getDELETEApiV1ProjectsIdMockHandler = (overrideResponse?: UnknownInterface | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<UnknownInterface> | UnknownInterface)) => {
  return http.delete('*/api/v1/projects/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getDELETEApiV1ProjectsIdResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGETApiV1ProjectsIdMockHandler = (overrideResponse?: Project | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<Project> | Project)) => {
  return http.get('*/api/v1/projects/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGETApiV1ProjectsIdResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPUTApiV1ProjectsIdMockHandler = (overrideResponse?: Project | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<Project> | Project)) => {
  return http.put('*/api/v1/projects/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getPUTApiV1ProjectsIdResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGETApiV1TasksMockHandler = (overrideResponse?: Task[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<Task[]> | Task[])) => {
  return http.get('*/api/v1/tasks', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGETApiV1TasksResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPOSTApiV1TasksMockHandler = (overrideResponse?: Task | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<Task> | Task)) => {
  return http.post('*/api/v1/tasks', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getPOSTApiV1TasksResponseMock()),
      { status: 201,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getDELETEApiV1TasksIdMockHandler = (overrideResponse?: UnknownInterface | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<UnknownInterface> | UnknownInterface)) => {
  return http.delete('*/api/v1/tasks/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getDELETEApiV1TasksIdResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGETApiV1TasksIdMockHandler = (overrideResponse?: Task | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<Task> | Task)) => {
  return http.get('*/api/v1/tasks/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGETApiV1TasksIdResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPUTApiV1TasksIdMockHandler = (overrideResponse?: Task | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<Task> | Task)) => {
  return http.put('*/api/v1/tasks/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getPUTApiV1TasksIdResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGETApiV1UsersMockHandler = (overrideResponse?: User[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<User[]> | User[])) => {
  return http.get('*/api/v1/users', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGETApiV1UsersResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPOSTApiV1UsersMockHandler = (overrideResponse?: User | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<User> | User)) => {
  return http.post('*/api/v1/users', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getPOSTApiV1UsersResponseMock()),
      { status: 201,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGETApiV1UsersIdMockHandler = (overrideResponse?: User | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<User> | User)) => {
  return http.get('*/api/v1/users/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGETApiV1UsersIdResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPUTApiV1UsersIdMockHandler = (overrideResponse?: User | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<User> | User)) => {
  return http.put('*/api/v1/users/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getPUTApiV1UsersIdResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGETHealthMockHandler = (overrideResponse?: String | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<String> | String)) => {
  return http.get('*/health', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGETHealthResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}
export const getOpenAPIMock = () => [
  getPOSTApiV1AuthLoginMockHandler(),
  getPOSTApiV1AuthRefreshMockHandler(),
  getGETApiV1ProjectsMockHandler(),
  getPOSTApiV1ProjectsMockHandler(),
  getDELETEApiV1ProjectsIdMockHandler(),
  getGETApiV1ProjectsIdMockHandler(),
  getPUTApiV1ProjectsIdMockHandler(),
  getGETApiV1TasksMockHandler(),
  getPOSTApiV1TasksMockHandler(),
  getDELETEApiV1TasksIdMockHandler(),
  getGETApiV1TasksIdMockHandler(),
  getPUTApiV1TasksIdMockHandler(),
  getGETApiV1UsersMockHandler(),
  getPOSTApiV1UsersMockHandler(),
  getGETApiV1UsersIdMockHandler(),
  getPUTApiV1UsersIdMockHandler(),
  getGETHealthMockHandler()
]
