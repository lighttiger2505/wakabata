/**
 * Generated by orval v7.5.0 🍺
 * Do not edit manually.
 * OpenAPI
 * wakabata API
 * OpenAPI spec version: 0.0.1
 */
import type {
  HTTPError,
  LoginRequest,
  Project,
  ProjectToCreate,
  ProjectToUpdate,
  RefreshTokenRequest,
  String,
  Task,
  TaskToCreate,
  TaskToUpdate,
  TokenPair,
  UnknownInterface,
  User,
  UserInfo,
  UserToCreate
} from './model'


/**
 * #### Controller: 

`github.com/lighttiger2505/wakabata/internal/app.(*AuthHandler).Login`

#### Middlewares:

- `github.com/go-fuego/fuego.defaultLogger.middleware`

---


 * @summary login
 */
export type pOSTApiV1AuthLoginResponse = {
  data: TokenPair | HTTPError | void;
  status: number;
  headers: Headers;
}

export const getPOSTApiV1AuthLoginUrl = () => {


  return `/api/v1/auth/login`
}

export const pOSTApiV1AuthLogin = async (loginRequest: LoginRequest, options?: RequestInit): Promise<pOSTApiV1AuthLoginResponse> => {
  
  const res = await fetch(getPOSTApiV1AuthLoginUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      loginRequest,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: pOSTApiV1AuthLoginResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as pOSTApiV1AuthLoginResponse
}



/**
 * #### Controller: 

`github.com/lighttiger2505/wakabata/internal/app.(*AuthHandler).Logout`

#### Middlewares:

- `github.com/go-fuego/fuego.defaultLogger.middleware`

---


 * @summary logout
 */
export type pOSTApiV1AuthLogoutResponse = {
  data: String | HTTPError | void;
  status: number;
  headers: Headers;
}

export const getPOSTApiV1AuthLogoutUrl = () => {


  return `/api/v1/auth/logout`
}

export const pOSTApiV1AuthLogout = async ( options?: RequestInit): Promise<pOSTApiV1AuthLogoutResponse> => {
  
  const res = await fetch(getPOSTApiV1AuthLogoutUrl(),
  {      
    ...options,
    method: 'POST'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: pOSTApiV1AuthLogoutResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as pOSTApiV1AuthLogoutResponse
}



/**
 * #### Controller: 

`github.com/lighttiger2505/wakabata/internal/app.(*AuthHandler).GetCurrentUser`

#### Middlewares:

- `github.com/go-fuego/fuego.defaultLogger.middleware`

---


 * @summary get current user
 */
export type gETApiV1AuthMeResponse = {
  data: UserInfo | HTTPError | void;
  status: number;
  headers: Headers;
}

export const getGETApiV1AuthMeUrl = () => {


  return `/api/v1/auth/me`
}

export const gETApiV1AuthMe = async ( options?: RequestInit): Promise<gETApiV1AuthMeResponse> => {
  
  const res = await fetch(getGETApiV1AuthMeUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: gETApiV1AuthMeResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as gETApiV1AuthMeResponse
}



/**
 * #### Controller: 

`github.com/lighttiger2505/wakabata/internal/app.(*AuthHandler).RefreshToken`

#### Middlewares:

- `github.com/go-fuego/fuego.defaultLogger.middleware`

---


 * @summary refresh token
 */
export type pOSTApiV1AuthRefreshResponse = {
  data: TokenPair | HTTPError | void;
  status: number;
  headers: Headers;
}

export const getPOSTApiV1AuthRefreshUrl = () => {


  return `/api/v1/auth/refresh`
}

export const pOSTApiV1AuthRefresh = async (refreshTokenRequest: RefreshTokenRequest, options?: RequestInit): Promise<pOSTApiV1AuthRefreshResponse> => {
  
  const res = await fetch(getPOSTApiV1AuthRefreshUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      refreshTokenRequest,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: pOSTApiV1AuthRefreshResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as pOSTApiV1AuthRefreshResponse
}



/**
 * #### Controller: 

`github.com/lighttiger2505/wakabata/internal/app.(*ProjectHandler).SearchProjects`

#### Middlewares:

- `github.com/go-fuego/fuego.defaultLogger.middleware`

---


 * @summary search projects
 */
export type gETApiV1ProjectsResponse = {
  data: Project[] | HTTPError | void;
  status: number;
  headers: Headers;
}

export const getGETApiV1ProjectsUrl = () => {


  return `/api/v1/projects`
}

export const gETApiV1Projects = async ( options?: RequestInit): Promise<gETApiV1ProjectsResponse> => {
  
  const res = await fetch(getGETApiV1ProjectsUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: gETApiV1ProjectsResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as gETApiV1ProjectsResponse
}



/**
 * #### Controller: 

`github.com/lighttiger2505/wakabata/internal/app.(*ProjectHandler).CreateProject`

#### Middlewares:

- `github.com/go-fuego/fuego.defaultLogger.middleware`

---


 * @summary create project
 */
export type pOSTApiV1ProjectsResponse = {
  data: Project | HTTPError | void;
  status: number;
  headers: Headers;
}

export const getPOSTApiV1ProjectsUrl = () => {


  return `/api/v1/projects`
}

export const pOSTApiV1Projects = async (projectToCreate: ProjectToCreate, options?: RequestInit): Promise<pOSTApiV1ProjectsResponse> => {
  
  const res = await fetch(getPOSTApiV1ProjectsUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      projectToCreate,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: pOSTApiV1ProjectsResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as pOSTApiV1ProjectsResponse
}



/**
 * #### Controller: 

`github.com/lighttiger2505/wakabata/internal/app.(*ProjectHandler).DeleteProject`

#### Middlewares:

- `github.com/go-fuego/fuego.defaultLogger.middleware`

---


 * @summary delete project
 */
export type dELETEApiV1ProjectsIdResponse = {
  data: UnknownInterface | HTTPError | void;
  status: number;
  headers: Headers;
}

export const getDELETEApiV1ProjectsIdUrl = (id: string,) => {


  return `/api/v1/projects/${id}`
}

export const dELETEApiV1ProjectsId = async (id: string, options?: RequestInit): Promise<dELETEApiV1ProjectsIdResponse> => {
  
  const res = await fetch(getDELETEApiV1ProjectsIdUrl(id),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: dELETEApiV1ProjectsIdResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as dELETEApiV1ProjectsIdResponse
}



/**
 * #### Controller: 

`github.com/lighttiger2505/wakabata/internal/app.(*ProjectHandler).GetProject`

#### Middlewares:

- `github.com/go-fuego/fuego.defaultLogger.middleware`

---


 * @summary get project
 */
export type gETApiV1ProjectsIdResponse = {
  data: Project | HTTPError | void;
  status: number;
  headers: Headers;
}

export const getGETApiV1ProjectsIdUrl = (id: string,) => {


  return `/api/v1/projects/${id}`
}

export const gETApiV1ProjectsId = async (id: string, options?: RequestInit): Promise<gETApiV1ProjectsIdResponse> => {
  
  const res = await fetch(getGETApiV1ProjectsIdUrl(id),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: gETApiV1ProjectsIdResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as gETApiV1ProjectsIdResponse
}



/**
 * #### Controller: 

`github.com/lighttiger2505/wakabata/internal/app.(*ProjectHandler).UpdateProject`

#### Middlewares:

- `github.com/go-fuego/fuego.defaultLogger.middleware`

---


 * @summary update project
 */
export type pUTApiV1ProjectsIdResponse = {
  data: Project | HTTPError | void;
  status: number;
  headers: Headers;
}

export const getPUTApiV1ProjectsIdUrl = (id: string,) => {


  return `/api/v1/projects/${id}`
}

export const pUTApiV1ProjectsId = async (id: string,
    projectToUpdate: ProjectToUpdate, options?: RequestInit): Promise<pUTApiV1ProjectsIdResponse> => {
  
  const res = await fetch(getPUTApiV1ProjectsIdUrl(id),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      projectToUpdate,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: pUTApiV1ProjectsIdResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as pUTApiV1ProjectsIdResponse
}



/**
 * #### Controller: 

`github.com/lighttiger2505/wakabata/internal/app.(*TaskHandler).SearchTasks`

#### Middlewares:

- `github.com/go-fuego/fuego.defaultLogger.middleware`

---


 * @summary search tasks
 */
export type gETApiV1TasksResponse = {
  data: Task[] | HTTPError | void;
  status: number;
  headers: Headers;
}

export const getGETApiV1TasksUrl = () => {


  return `/api/v1/tasks`
}

export const gETApiV1Tasks = async ( options?: RequestInit): Promise<gETApiV1TasksResponse> => {
  
  const res = await fetch(getGETApiV1TasksUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: gETApiV1TasksResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as gETApiV1TasksResponse
}



/**
 * #### Controller: 

`github.com/lighttiger2505/wakabata/internal/app.(*TaskHandler).CreateTask`

#### Middlewares:

- `github.com/go-fuego/fuego.defaultLogger.middleware`

---


 * @summary create task
 */
export type pOSTApiV1TasksResponse = {
  data: Task | HTTPError | void;
  status: number;
  headers: Headers;
}

export const getPOSTApiV1TasksUrl = () => {


  return `/api/v1/tasks`
}

export const pOSTApiV1Tasks = async (taskToCreate: TaskToCreate, options?: RequestInit): Promise<pOSTApiV1TasksResponse> => {
  
  const res = await fetch(getPOSTApiV1TasksUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      taskToCreate,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: pOSTApiV1TasksResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as pOSTApiV1TasksResponse
}



/**
 * #### Controller: 

`github.com/lighttiger2505/wakabata/internal/app.(*TaskHandler).DeleteTask`

#### Middlewares:

- `github.com/go-fuego/fuego.defaultLogger.middleware`

---


 * @summary delete task
 */
export type dELETEApiV1TasksIdResponse = {
  data: UnknownInterface | HTTPError | void;
  status: number;
  headers: Headers;
}

export const getDELETEApiV1TasksIdUrl = (id: string,) => {


  return `/api/v1/tasks/${id}`
}

export const dELETEApiV1TasksId = async (id: string, options?: RequestInit): Promise<dELETEApiV1TasksIdResponse> => {
  
  const res = await fetch(getDELETEApiV1TasksIdUrl(id),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: dELETEApiV1TasksIdResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as dELETEApiV1TasksIdResponse
}



/**
 * #### Controller: 

`github.com/lighttiger2505/wakabata/internal/app.(*TaskHandler).GetTask`

#### Middlewares:

- `github.com/go-fuego/fuego.defaultLogger.middleware`

---


 * @summary get task
 */
export type gETApiV1TasksIdResponse = {
  data: Task | HTTPError | void;
  status: number;
  headers: Headers;
}

export const getGETApiV1TasksIdUrl = (id: string,) => {


  return `/api/v1/tasks/${id}`
}

export const gETApiV1TasksId = async (id: string, options?: RequestInit): Promise<gETApiV1TasksIdResponse> => {
  
  const res = await fetch(getGETApiV1TasksIdUrl(id),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: gETApiV1TasksIdResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as gETApiV1TasksIdResponse
}



/**
 * #### Controller: 

`github.com/lighttiger2505/wakabata/internal/app.(*TaskHandler).UpdateTask`

#### Middlewares:

- `github.com/go-fuego/fuego.defaultLogger.middleware`

---


 * @summary update task
 */
export type pUTApiV1TasksIdResponse = {
  data: Task | HTTPError | void;
  status: number;
  headers: Headers;
}

export const getPUTApiV1TasksIdUrl = (id: string,) => {


  return `/api/v1/tasks/${id}`
}

export const pUTApiV1TasksId = async (id: string,
    taskToUpdate: TaskToUpdate, options?: RequestInit): Promise<pUTApiV1TasksIdResponse> => {
  
  const res = await fetch(getPUTApiV1TasksIdUrl(id),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      taskToUpdate,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: pUTApiV1TasksIdResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as pUTApiV1TasksIdResponse
}



/**
 * #### Controller: 

`github.com/lighttiger2505/wakabata/internal/app.(*UserHandler).SearchUsers`

#### Middlewares:

- `github.com/go-fuego/fuego.defaultLogger.middleware`

---


 * @summary search users
 */
export type gETApiV1UsersResponse = {
  data: User[] | HTTPError | void;
  status: number;
  headers: Headers;
}

export const getGETApiV1UsersUrl = () => {


  return `/api/v1/users`
}

export const gETApiV1Users = async ( options?: RequestInit): Promise<gETApiV1UsersResponse> => {
  
  const res = await fetch(getGETApiV1UsersUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: gETApiV1UsersResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as gETApiV1UsersResponse
}



/**
 * #### Controller: 

`github.com/lighttiger2505/wakabata/internal/app.(*UserHandler).CreateUser`

#### Middlewares:

- `github.com/go-fuego/fuego.defaultLogger.middleware`

---


 * @summary create user
 */
export type pOSTApiV1UsersResponse = {
  data: User | HTTPError | void;
  status: number;
  headers: Headers;
}

export const getPOSTApiV1UsersUrl = () => {


  return `/api/v1/users`
}

export const pOSTApiV1Users = async (userToCreate: UserToCreate, options?: RequestInit): Promise<pOSTApiV1UsersResponse> => {
  
  const res = await fetch(getPOSTApiV1UsersUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      userToCreate,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: pOSTApiV1UsersResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as pOSTApiV1UsersResponse
}



/**
 * #### Controller: 

`github.com/lighttiger2505/wakabata/internal/app.(*UserHandler).GetUser`

#### Middlewares:

- `github.com/go-fuego/fuego.defaultLogger.middleware`

---


 * @summary get user
 */
export type gETApiV1UsersIdResponse = {
  data: User | HTTPError | void;
  status: number;
  headers: Headers;
}

export const getGETApiV1UsersIdUrl = (id: string,) => {


  return `/api/v1/users/${id}`
}

export const gETApiV1UsersId = async (id: string, options?: RequestInit): Promise<gETApiV1UsersIdResponse> => {
  
  const res = await fetch(getGETApiV1UsersIdUrl(id),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: gETApiV1UsersIdResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as gETApiV1UsersIdResponse
}



/**
 * #### Controller: 

`github.com/lighttiger2505/wakabata/internal/app.(*UserHandler).UpdateUser`

#### Middlewares:

- `github.com/go-fuego/fuego.defaultLogger.middleware`

---


 * @summary update user
 */
export type pUTApiV1UsersIdResponse = {
  data: User | HTTPError | void;
  status: number;
  headers: Headers;
}

export const getPUTApiV1UsersIdUrl = (id: string,) => {


  return `/api/v1/users/${id}`
}

export const pUTApiV1UsersId = async (id: string,
    user: User, options?: RequestInit): Promise<pUTApiV1UsersIdResponse> => {
  
  const res = await fetch(getPUTApiV1UsersIdUrl(id),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      user,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: pUTApiV1UsersIdResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as pUTApiV1UsersIdResponse
}



/**
 * #### Controller: 

`main.main.func1`

#### Middlewares:

- `github.com/go-fuego/fuego.defaultLogger.middleware`

---


 * @summary func1
 */
export type gETHealthResponse = {
  data: String | HTTPError | void;
  status: number;
  headers: Headers;
}

export const getGETHealthUrl = () => {


  return `/health`
}

export const gETHealth = async ( options?: RequestInit): Promise<gETHealthResponse> => {
  
  const res = await fetch(getGETHealthUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: gETHealthResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as gETHealthResponse
}



