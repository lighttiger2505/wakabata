/**
 * Generated by orval v7.5.0 üç∫
 * Do not edit manually.
 * OpenAPI
 * wakabata API
 * OpenAPI spec version: 0.0.1
 */
import type {
  LoginRequest,
  Project,
  ProjectToCreate,
  ProjectToUpdate,
  RefreshTokenRequest,
  String,
  Task,
  TaskToCreate,
  TaskToUpdate,
  TokenPair,
  UnknownInterface,
  User,
  UserInfo,
  UserToCreate
} from './model'
import { customInstance } from '../../lib/custom-instance';
import type { BodyType } from '../../lib/custom-instance';



type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


  export const getOpenAPI = () => {
/**
 * #### Controller: 

`github.com/lighttiger2505/wakabata/internal/app.(*AuthHandler).Login`

#### Middlewares:

- `github.com/go-fuego/fuego.defaultLogger.middleware`

---


 * @summary login
 */
const pOSTApiV1AuthLogin = (
    loginRequest: BodyType<LoginRequest>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<TokenPair>(
      {url: `/api/v1/auth/login`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: loginRequest
    },
      options);
    }
  
/**
 * #### Controller: 

`github.com/lighttiger2505/wakabata/internal/app.(*AuthHandler).Logout`

#### Middlewares:

- `github.com/go-fuego/fuego.defaultLogger.middleware`

---


 * @summary logout
 */
const pOSTApiV1AuthLogout = (
    
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<String>(
      {url: `/api/v1/auth/logout`, method: 'POST'
    },
      options);
    }
  
/**
 * #### Controller: 

`github.com/lighttiger2505/wakabata/internal/app.(*AuthHandler).GetCurrentUser`

#### Middlewares:

- `github.com/go-fuego/fuego.defaultLogger.middleware`

---


 * @summary get current user
 */
const gETApiV1AuthMe = (
    
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<UserInfo>(
      {url: `/api/v1/auth/me`, method: 'GET'
    },
      options);
    }
  
/**
 * #### Controller: 

`github.com/lighttiger2505/wakabata/internal/app.(*AuthHandler).RefreshToken`

#### Middlewares:

- `github.com/go-fuego/fuego.defaultLogger.middleware`

---


 * @summary refresh token
 */
const pOSTApiV1AuthRefresh = (
    refreshTokenRequest: BodyType<RefreshTokenRequest>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<TokenPair>(
      {url: `/api/v1/auth/refresh`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: refreshTokenRequest
    },
      options);
    }
  
/**
 * #### Controller: 

`github.com/lighttiger2505/wakabata/internal/app.(*ProjectHandler).SearchProjects`

#### Middlewares:

- `github.com/go-fuego/fuego.defaultLogger.middleware`

---


 * @summary search projects
 */
const gETApiV1Projects = (
    
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<Project[]>(
      {url: `/api/v1/projects`, method: 'GET'
    },
      options);
    }
  
/**
 * #### Controller: 

`github.com/lighttiger2505/wakabata/internal/app.(*ProjectHandler).CreateProject`

#### Middlewares:

- `github.com/go-fuego/fuego.defaultLogger.middleware`

---


 * @summary create project
 */
const pOSTApiV1Projects = (
    projectToCreate: BodyType<ProjectToCreate>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<Project>(
      {url: `/api/v1/projects`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: projectToCreate
    },
      options);
    }
  
/**
 * #### Controller: 

`github.com/lighttiger2505/wakabata/internal/app.(*ProjectHandler).DeleteProject`

#### Middlewares:

- `github.com/go-fuego/fuego.defaultLogger.middleware`

---


 * @summary delete project
 */
const dELETEApiV1ProjectsId = (
    id: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<UnknownInterface>(
      {url: `/api/v1/projects/${id}`, method: 'DELETE'
    },
      options);
    }
  
/**
 * #### Controller: 

`github.com/lighttiger2505/wakabata/internal/app.(*ProjectHandler).GetProject`

#### Middlewares:

- `github.com/go-fuego/fuego.defaultLogger.middleware`

---


 * @summary get project
 */
const gETApiV1ProjectsId = (
    id: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<Project>(
      {url: `/api/v1/projects/${id}`, method: 'GET'
    },
      options);
    }
  
/**
 * #### Controller: 

`github.com/lighttiger2505/wakabata/internal/app.(*ProjectHandler).UpdateProject`

#### Middlewares:

- `github.com/go-fuego/fuego.defaultLogger.middleware`

---


 * @summary update project
 */
const pUTApiV1ProjectsId = (
    id: string,
    projectToUpdate: BodyType<ProjectToUpdate>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<Project>(
      {url: `/api/v1/projects/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: projectToUpdate
    },
      options);
    }
  
/**
 * #### Controller: 

`github.com/lighttiger2505/wakabata/internal/app.(*TaskHandler).SearchTasks`

#### Middlewares:

- `github.com/go-fuego/fuego.defaultLogger.middleware`

---


 * @summary search tasks
 */
const gETApiV1Tasks = (
    
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<Task[]>(
      {url: `/api/v1/tasks`, method: 'GET'
    },
      options);
    }
  
/**
 * #### Controller: 

`github.com/lighttiger2505/wakabata/internal/app.(*TaskHandler).CreateTask`

#### Middlewares:

- `github.com/go-fuego/fuego.defaultLogger.middleware`

---


 * @summary create task
 */
const pOSTApiV1Tasks = (
    taskToCreate: BodyType<TaskToCreate>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<Task>(
      {url: `/api/v1/tasks`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: taskToCreate
    },
      options);
    }
  
/**
 * #### Controller: 

`github.com/lighttiger2505/wakabata/internal/app.(*TaskHandler).DeleteTask`

#### Middlewares:

- `github.com/go-fuego/fuego.defaultLogger.middleware`

---


 * @summary delete task
 */
const dELETEApiV1TasksId = (
    id: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<UnknownInterface>(
      {url: `/api/v1/tasks/${id}`, method: 'DELETE'
    },
      options);
    }
  
/**
 * #### Controller: 

`github.com/lighttiger2505/wakabata/internal/app.(*TaskHandler).GetTask`

#### Middlewares:

- `github.com/go-fuego/fuego.defaultLogger.middleware`

---


 * @summary get task
 */
const gETApiV1TasksId = (
    id: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<Task>(
      {url: `/api/v1/tasks/${id}`, method: 'GET'
    },
      options);
    }
  
/**
 * #### Controller: 

`github.com/lighttiger2505/wakabata/internal/app.(*TaskHandler).UpdateTask`

#### Middlewares:

- `github.com/go-fuego/fuego.defaultLogger.middleware`

---


 * @summary update task
 */
const pUTApiV1TasksId = (
    id: string,
    taskToUpdate: BodyType<TaskToUpdate>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<Task>(
      {url: `/api/v1/tasks/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: taskToUpdate
    },
      options);
    }
  
/**
 * #### Controller: 

`github.com/lighttiger2505/wakabata/internal/app.(*UserHandler).SearchUsers`

#### Middlewares:

- `github.com/go-fuego/fuego.defaultLogger.middleware`

---


 * @summary search users
 */
const gETApiV1Users = (
    
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<User[]>(
      {url: `/api/v1/users`, method: 'GET'
    },
      options);
    }
  
/**
 * #### Controller: 

`github.com/lighttiger2505/wakabata/internal/app.(*UserHandler).CreateUser`

#### Middlewares:

- `github.com/go-fuego/fuego.defaultLogger.middleware`

---


 * @summary create user
 */
const pOSTApiV1Users = (
    userToCreate: BodyType<UserToCreate>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<User>(
      {url: `/api/v1/users`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: userToCreate
    },
      options);
    }
  
/**
 * #### Controller: 

`github.com/lighttiger2505/wakabata/internal/app.(*UserHandler).GetUser`

#### Middlewares:

- `github.com/go-fuego/fuego.defaultLogger.middleware`

---


 * @summary get user
 */
const gETApiV1UsersId = (
    id: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<User>(
      {url: `/api/v1/users/${id}`, method: 'GET'
    },
      options);
    }
  
/**
 * #### Controller: 

`github.com/lighttiger2505/wakabata/internal/app.(*UserHandler).UpdateUser`

#### Middlewares:

- `github.com/go-fuego/fuego.defaultLogger.middleware`

---


 * @summary update user
 */
const pUTApiV1UsersId = (
    id: string,
    user: BodyType<User>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<User>(
      {url: `/api/v1/users/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: user
    },
      options);
    }
  
/**
 * #### Controller: 

`main.main.func1`

#### Middlewares:

- `github.com/go-fuego/fuego.defaultLogger.middleware`

---


 * @summary func1
 */
const gETHealth = (
    
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<String>(
      {url: `/health`, method: 'GET'
    },
      options);
    }
  
return {pOSTApiV1AuthLogin,pOSTApiV1AuthLogout,gETApiV1AuthMe,pOSTApiV1AuthRefresh,gETApiV1Projects,pOSTApiV1Projects,dELETEApiV1ProjectsId,gETApiV1ProjectsId,pUTApiV1ProjectsId,gETApiV1Tasks,pOSTApiV1Tasks,dELETEApiV1TasksId,gETApiV1TasksId,pUTApiV1TasksId,gETApiV1Users,pOSTApiV1Users,gETApiV1UsersId,pUTApiV1UsersId,gETHealth}};
export type POSTApiV1AuthLoginResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getOpenAPI>['pOSTApiV1AuthLogin']>>>
export type POSTApiV1AuthLogoutResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getOpenAPI>['pOSTApiV1AuthLogout']>>>
export type GETApiV1AuthMeResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getOpenAPI>['gETApiV1AuthMe']>>>
export type POSTApiV1AuthRefreshResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getOpenAPI>['pOSTApiV1AuthRefresh']>>>
export type GETApiV1ProjectsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getOpenAPI>['gETApiV1Projects']>>>
export type POSTApiV1ProjectsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getOpenAPI>['pOSTApiV1Projects']>>>
export type DELETEApiV1ProjectsIdResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getOpenAPI>['dELETEApiV1ProjectsId']>>>
export type GETApiV1ProjectsIdResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getOpenAPI>['gETApiV1ProjectsId']>>>
export type PUTApiV1ProjectsIdResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getOpenAPI>['pUTApiV1ProjectsId']>>>
export type GETApiV1TasksResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getOpenAPI>['gETApiV1Tasks']>>>
export type POSTApiV1TasksResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getOpenAPI>['pOSTApiV1Tasks']>>>
export type DELETEApiV1TasksIdResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getOpenAPI>['dELETEApiV1TasksId']>>>
export type GETApiV1TasksIdResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getOpenAPI>['gETApiV1TasksId']>>>
export type PUTApiV1TasksIdResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getOpenAPI>['pUTApiV1TasksId']>>>
export type GETApiV1UsersResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getOpenAPI>['gETApiV1Users']>>>
export type POSTApiV1UsersResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getOpenAPI>['pOSTApiV1Users']>>>
export type GETApiV1UsersIdResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getOpenAPI>['gETApiV1UsersId']>>>
export type PUTApiV1UsersIdResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getOpenAPI>['pUTApiV1UsersId']>>>
export type GETHealthResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getOpenAPI>['gETHealth']>>>
