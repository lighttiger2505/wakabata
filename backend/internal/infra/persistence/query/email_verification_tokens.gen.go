// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/lighttiger2505/wakabata/internal/domain/model"
)

func newEmailVerificationToken(db *gorm.DB, opts ...gen.DOOption) emailVerificationToken {
	_emailVerificationToken := emailVerificationToken{}

	_emailVerificationToken.emailVerificationTokenDo.UseDB(db, opts...)
	_emailVerificationToken.emailVerificationTokenDo.UseModel(&model.EmailVerificationToken{})

	tableName := _emailVerificationToken.emailVerificationTokenDo.TableName()
	_emailVerificationToken.ALL = field.NewAsterisk(tableName)
	_emailVerificationToken.ID = field.NewString(tableName, "id")
	_emailVerificationToken.UserID = field.NewString(tableName, "user_id")
	_emailVerificationToken.TokenHash = field.NewString(tableName, "token_hash")
	_emailVerificationToken.ExpiresAt = field.NewTime(tableName, "expires_at")
	_emailVerificationToken.UsedAt = field.NewTime(tableName, "used_at")
	_emailVerificationToken.CreatedAt = field.NewTime(tableName, "created_at")

	_emailVerificationToken.fillFieldMap()

	return _emailVerificationToken
}

type emailVerificationToken struct {
	emailVerificationTokenDo

	ALL       field.Asterisk
	ID        field.String
	UserID    field.String
	TokenHash field.String
	ExpiresAt field.Time
	UsedAt    field.Time
	CreatedAt field.Time

	fieldMap map[string]field.Expr
}

func (e emailVerificationToken) Table(newTableName string) *emailVerificationToken {
	e.emailVerificationTokenDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e emailVerificationToken) As(alias string) *emailVerificationToken {
	e.emailVerificationTokenDo.DO = *(e.emailVerificationTokenDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *emailVerificationToken) updateTableName(table string) *emailVerificationToken {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewString(table, "id")
	e.UserID = field.NewString(table, "user_id")
	e.TokenHash = field.NewString(table, "token_hash")
	e.ExpiresAt = field.NewTime(table, "expires_at")
	e.UsedAt = field.NewTime(table, "used_at")
	e.CreatedAt = field.NewTime(table, "created_at")

	e.fillFieldMap()

	return e
}

func (e *emailVerificationToken) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *emailVerificationToken) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 6)
	e.fieldMap["id"] = e.ID
	e.fieldMap["user_id"] = e.UserID
	e.fieldMap["token_hash"] = e.TokenHash
	e.fieldMap["expires_at"] = e.ExpiresAt
	e.fieldMap["used_at"] = e.UsedAt
	e.fieldMap["created_at"] = e.CreatedAt
}

func (e emailVerificationToken) clone(db *gorm.DB) emailVerificationToken {
	e.emailVerificationTokenDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e emailVerificationToken) replaceDB(db *gorm.DB) emailVerificationToken {
	e.emailVerificationTokenDo.ReplaceDB(db)
	return e
}

type emailVerificationTokenDo struct{ gen.DO }

type IEmailVerificationTokenDo interface {
	gen.SubQuery
	Debug() IEmailVerificationTokenDo
	WithContext(ctx context.Context) IEmailVerificationTokenDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IEmailVerificationTokenDo
	WriteDB() IEmailVerificationTokenDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IEmailVerificationTokenDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IEmailVerificationTokenDo
	Not(conds ...gen.Condition) IEmailVerificationTokenDo
	Or(conds ...gen.Condition) IEmailVerificationTokenDo
	Select(conds ...field.Expr) IEmailVerificationTokenDo
	Where(conds ...gen.Condition) IEmailVerificationTokenDo
	Order(conds ...field.Expr) IEmailVerificationTokenDo
	Distinct(cols ...field.Expr) IEmailVerificationTokenDo
	Omit(cols ...field.Expr) IEmailVerificationTokenDo
	Join(table schema.Tabler, on ...field.Expr) IEmailVerificationTokenDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IEmailVerificationTokenDo
	RightJoin(table schema.Tabler, on ...field.Expr) IEmailVerificationTokenDo
	Group(cols ...field.Expr) IEmailVerificationTokenDo
	Having(conds ...gen.Condition) IEmailVerificationTokenDo
	Limit(limit int) IEmailVerificationTokenDo
	Offset(offset int) IEmailVerificationTokenDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IEmailVerificationTokenDo
	Unscoped() IEmailVerificationTokenDo
	Create(values ...*model.EmailVerificationToken) error
	CreateInBatches(values []*model.EmailVerificationToken, batchSize int) error
	Save(values ...*model.EmailVerificationToken) error
	First() (*model.EmailVerificationToken, error)
	Take() (*model.EmailVerificationToken, error)
	Last() (*model.EmailVerificationToken, error)
	Find() ([]*model.EmailVerificationToken, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EmailVerificationToken, err error)
	FindInBatches(result *[]*model.EmailVerificationToken, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.EmailVerificationToken) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IEmailVerificationTokenDo
	Assign(attrs ...field.AssignExpr) IEmailVerificationTokenDo
	Joins(fields ...field.RelationField) IEmailVerificationTokenDo
	Preload(fields ...field.RelationField) IEmailVerificationTokenDo
	FirstOrInit() (*model.EmailVerificationToken, error)
	FirstOrCreate() (*model.EmailVerificationToken, error)
	FindByPage(offset int, limit int) (result []*model.EmailVerificationToken, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IEmailVerificationTokenDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	FilterWithNameAndRole(name string, role string) (result []model.EmailVerificationToken, err error)
}

// SELECT * FROM @@table WHERE name = @name{{if role !=""}} AND role = @role{{end}}
func (e emailVerificationTokenDo) FilterWithNameAndRole(name string, role string) (result []model.EmailVerificationToken, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, name)
	generateSQL.WriteString("SELECT * FROM email_verification_tokens WHERE name = ? ")
	if role != "" {
		params = append(params, role)
		generateSQL.WriteString("AND role = ? ")
	}

	var executeSQL *gorm.DB
	executeSQL = e.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (e emailVerificationTokenDo) Debug() IEmailVerificationTokenDo {
	return e.withDO(e.DO.Debug())
}

func (e emailVerificationTokenDo) WithContext(ctx context.Context) IEmailVerificationTokenDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e emailVerificationTokenDo) ReadDB() IEmailVerificationTokenDo {
	return e.Clauses(dbresolver.Read)
}

func (e emailVerificationTokenDo) WriteDB() IEmailVerificationTokenDo {
	return e.Clauses(dbresolver.Write)
}

func (e emailVerificationTokenDo) Session(config *gorm.Session) IEmailVerificationTokenDo {
	return e.withDO(e.DO.Session(config))
}

func (e emailVerificationTokenDo) Clauses(conds ...clause.Expression) IEmailVerificationTokenDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e emailVerificationTokenDo) Returning(value interface{}, columns ...string) IEmailVerificationTokenDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e emailVerificationTokenDo) Not(conds ...gen.Condition) IEmailVerificationTokenDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e emailVerificationTokenDo) Or(conds ...gen.Condition) IEmailVerificationTokenDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e emailVerificationTokenDo) Select(conds ...field.Expr) IEmailVerificationTokenDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e emailVerificationTokenDo) Where(conds ...gen.Condition) IEmailVerificationTokenDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e emailVerificationTokenDo) Order(conds ...field.Expr) IEmailVerificationTokenDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e emailVerificationTokenDo) Distinct(cols ...field.Expr) IEmailVerificationTokenDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e emailVerificationTokenDo) Omit(cols ...field.Expr) IEmailVerificationTokenDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e emailVerificationTokenDo) Join(table schema.Tabler, on ...field.Expr) IEmailVerificationTokenDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e emailVerificationTokenDo) LeftJoin(table schema.Tabler, on ...field.Expr) IEmailVerificationTokenDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e emailVerificationTokenDo) RightJoin(table schema.Tabler, on ...field.Expr) IEmailVerificationTokenDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e emailVerificationTokenDo) Group(cols ...field.Expr) IEmailVerificationTokenDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e emailVerificationTokenDo) Having(conds ...gen.Condition) IEmailVerificationTokenDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e emailVerificationTokenDo) Limit(limit int) IEmailVerificationTokenDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e emailVerificationTokenDo) Offset(offset int) IEmailVerificationTokenDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e emailVerificationTokenDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IEmailVerificationTokenDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e emailVerificationTokenDo) Unscoped() IEmailVerificationTokenDo {
	return e.withDO(e.DO.Unscoped())
}

func (e emailVerificationTokenDo) Create(values ...*model.EmailVerificationToken) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e emailVerificationTokenDo) CreateInBatches(values []*model.EmailVerificationToken, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e emailVerificationTokenDo) Save(values ...*model.EmailVerificationToken) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e emailVerificationTokenDo) First() (*model.EmailVerificationToken, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.EmailVerificationToken), nil
	}
}

func (e emailVerificationTokenDo) Take() (*model.EmailVerificationToken, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.EmailVerificationToken), nil
	}
}

func (e emailVerificationTokenDo) Last() (*model.EmailVerificationToken, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.EmailVerificationToken), nil
	}
}

func (e emailVerificationTokenDo) Find() ([]*model.EmailVerificationToken, error) {
	result, err := e.DO.Find()
	return result.([]*model.EmailVerificationToken), err
}

func (e emailVerificationTokenDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EmailVerificationToken, err error) {
	buf := make([]*model.EmailVerificationToken, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e emailVerificationTokenDo) FindInBatches(result *[]*model.EmailVerificationToken, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e emailVerificationTokenDo) Attrs(attrs ...field.AssignExpr) IEmailVerificationTokenDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e emailVerificationTokenDo) Assign(attrs ...field.AssignExpr) IEmailVerificationTokenDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e emailVerificationTokenDo) Joins(fields ...field.RelationField) IEmailVerificationTokenDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e emailVerificationTokenDo) Preload(fields ...field.RelationField) IEmailVerificationTokenDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e emailVerificationTokenDo) FirstOrInit() (*model.EmailVerificationToken, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.EmailVerificationToken), nil
	}
}

func (e emailVerificationTokenDo) FirstOrCreate() (*model.EmailVerificationToken, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.EmailVerificationToken), nil
	}
}

func (e emailVerificationTokenDo) FindByPage(offset int, limit int) (result []*model.EmailVerificationToken, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e emailVerificationTokenDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e emailVerificationTokenDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e emailVerificationTokenDo) Delete(models ...*model.EmailVerificationToken) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *emailVerificationTokenDo) withDO(do gen.Dao) *emailVerificationTokenDo {
	e.DO = *do.(*gen.DO)
	return e
}
