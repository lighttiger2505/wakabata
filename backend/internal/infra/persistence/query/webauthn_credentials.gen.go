// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/lighttiger2505/wakabata/internal/domain/model"
)

func newWebauthnCredential(db *gorm.DB, opts ...gen.DOOption) webauthnCredential {
	_webauthnCredential := webauthnCredential{}

	_webauthnCredential.webauthnCredentialDo.UseDB(db, opts...)
	_webauthnCredential.webauthnCredentialDo.UseModel(&model.WebauthnCredential{})

	tableName := _webauthnCredential.webauthnCredentialDo.TableName()
	_webauthnCredential.ALL = field.NewAsterisk(tableName)
	_webauthnCredential.ID = field.NewString(tableName, "id")
	_webauthnCredential.UserID = field.NewString(tableName, "user_id")
	_webauthnCredential.CredentialID = field.NewString(tableName, "credential_id")
	_webauthnCredential.PublicKey = field.NewString(tableName, "public_key")
	_webauthnCredential.SignCount = field.NewInt64(tableName, "sign_count")
	_webauthnCredential.CreatedAt = field.NewTime(tableName, "created_at")
	_webauthnCredential.UpdatedAt = field.NewTime(tableName, "updated_at")

	_webauthnCredential.fillFieldMap()

	return _webauthnCredential
}

type webauthnCredential struct {
	webauthnCredentialDo

	ALL          field.Asterisk
	ID           field.String
	UserID       field.String
	CredentialID field.String
	PublicKey    field.String
	SignCount    field.Int64
	CreatedAt    field.Time
	UpdatedAt    field.Time

	fieldMap map[string]field.Expr
}

func (w webauthnCredential) Table(newTableName string) *webauthnCredential {
	w.webauthnCredentialDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w webauthnCredential) As(alias string) *webauthnCredential {
	w.webauthnCredentialDo.DO = *(w.webauthnCredentialDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *webauthnCredential) updateTableName(table string) *webauthnCredential {
	w.ALL = field.NewAsterisk(table)
	w.ID = field.NewString(table, "id")
	w.UserID = field.NewString(table, "user_id")
	w.CredentialID = field.NewString(table, "credential_id")
	w.PublicKey = field.NewString(table, "public_key")
	w.SignCount = field.NewInt64(table, "sign_count")
	w.CreatedAt = field.NewTime(table, "created_at")
	w.UpdatedAt = field.NewTime(table, "updated_at")

	w.fillFieldMap()

	return w
}

func (w *webauthnCredential) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *webauthnCredential) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 7)
	w.fieldMap["id"] = w.ID
	w.fieldMap["user_id"] = w.UserID
	w.fieldMap["credential_id"] = w.CredentialID
	w.fieldMap["public_key"] = w.PublicKey
	w.fieldMap["sign_count"] = w.SignCount
	w.fieldMap["created_at"] = w.CreatedAt
	w.fieldMap["updated_at"] = w.UpdatedAt
}

func (w webauthnCredential) clone(db *gorm.DB) webauthnCredential {
	w.webauthnCredentialDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w webauthnCredential) replaceDB(db *gorm.DB) webauthnCredential {
	w.webauthnCredentialDo.ReplaceDB(db)
	return w
}

type webauthnCredentialDo struct{ gen.DO }

type IWebauthnCredentialDo interface {
	gen.SubQuery
	Debug() IWebauthnCredentialDo
	WithContext(ctx context.Context) IWebauthnCredentialDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWebauthnCredentialDo
	WriteDB() IWebauthnCredentialDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWebauthnCredentialDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWebauthnCredentialDo
	Not(conds ...gen.Condition) IWebauthnCredentialDo
	Or(conds ...gen.Condition) IWebauthnCredentialDo
	Select(conds ...field.Expr) IWebauthnCredentialDo
	Where(conds ...gen.Condition) IWebauthnCredentialDo
	Order(conds ...field.Expr) IWebauthnCredentialDo
	Distinct(cols ...field.Expr) IWebauthnCredentialDo
	Omit(cols ...field.Expr) IWebauthnCredentialDo
	Join(table schema.Tabler, on ...field.Expr) IWebauthnCredentialDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWebauthnCredentialDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWebauthnCredentialDo
	Group(cols ...field.Expr) IWebauthnCredentialDo
	Having(conds ...gen.Condition) IWebauthnCredentialDo
	Limit(limit int) IWebauthnCredentialDo
	Offset(offset int) IWebauthnCredentialDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWebauthnCredentialDo
	Unscoped() IWebauthnCredentialDo
	Create(values ...*model.WebauthnCredential) error
	CreateInBatches(values []*model.WebauthnCredential, batchSize int) error
	Save(values ...*model.WebauthnCredential) error
	First() (*model.WebauthnCredential, error)
	Take() (*model.WebauthnCredential, error)
	Last() (*model.WebauthnCredential, error)
	Find() ([]*model.WebauthnCredential, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WebauthnCredential, err error)
	FindInBatches(result *[]*model.WebauthnCredential, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.WebauthnCredential) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWebauthnCredentialDo
	Assign(attrs ...field.AssignExpr) IWebauthnCredentialDo
	Joins(fields ...field.RelationField) IWebauthnCredentialDo
	Preload(fields ...field.RelationField) IWebauthnCredentialDo
	FirstOrInit() (*model.WebauthnCredential, error)
	FirstOrCreate() (*model.WebauthnCredential, error)
	FindByPage(offset int, limit int) (result []*model.WebauthnCredential, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWebauthnCredentialDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	FilterWithNameAndRole(name string, role string) (result []model.WebauthnCredential, err error)
}

// SELECT * FROM @@table WHERE name = @name{{if role !=""}} AND role = @role{{end}}
func (w webauthnCredentialDo) FilterWithNameAndRole(name string, role string) (result []model.WebauthnCredential, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, name)
	generateSQL.WriteString("SELECT * FROM webauthn_credentials WHERE name = ? ")
	if role != "" {
		params = append(params, role)
		generateSQL.WriteString("AND role = ? ")
	}

	var executeSQL *gorm.DB
	executeSQL = w.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (w webauthnCredentialDo) Debug() IWebauthnCredentialDo {
	return w.withDO(w.DO.Debug())
}

func (w webauthnCredentialDo) WithContext(ctx context.Context) IWebauthnCredentialDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w webauthnCredentialDo) ReadDB() IWebauthnCredentialDo {
	return w.Clauses(dbresolver.Read)
}

func (w webauthnCredentialDo) WriteDB() IWebauthnCredentialDo {
	return w.Clauses(dbresolver.Write)
}

func (w webauthnCredentialDo) Session(config *gorm.Session) IWebauthnCredentialDo {
	return w.withDO(w.DO.Session(config))
}

func (w webauthnCredentialDo) Clauses(conds ...clause.Expression) IWebauthnCredentialDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w webauthnCredentialDo) Returning(value interface{}, columns ...string) IWebauthnCredentialDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w webauthnCredentialDo) Not(conds ...gen.Condition) IWebauthnCredentialDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w webauthnCredentialDo) Or(conds ...gen.Condition) IWebauthnCredentialDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w webauthnCredentialDo) Select(conds ...field.Expr) IWebauthnCredentialDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w webauthnCredentialDo) Where(conds ...gen.Condition) IWebauthnCredentialDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w webauthnCredentialDo) Order(conds ...field.Expr) IWebauthnCredentialDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w webauthnCredentialDo) Distinct(cols ...field.Expr) IWebauthnCredentialDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w webauthnCredentialDo) Omit(cols ...field.Expr) IWebauthnCredentialDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w webauthnCredentialDo) Join(table schema.Tabler, on ...field.Expr) IWebauthnCredentialDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w webauthnCredentialDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWebauthnCredentialDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w webauthnCredentialDo) RightJoin(table schema.Tabler, on ...field.Expr) IWebauthnCredentialDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w webauthnCredentialDo) Group(cols ...field.Expr) IWebauthnCredentialDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w webauthnCredentialDo) Having(conds ...gen.Condition) IWebauthnCredentialDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w webauthnCredentialDo) Limit(limit int) IWebauthnCredentialDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w webauthnCredentialDo) Offset(offset int) IWebauthnCredentialDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w webauthnCredentialDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWebauthnCredentialDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w webauthnCredentialDo) Unscoped() IWebauthnCredentialDo {
	return w.withDO(w.DO.Unscoped())
}

func (w webauthnCredentialDo) Create(values ...*model.WebauthnCredential) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w webauthnCredentialDo) CreateInBatches(values []*model.WebauthnCredential, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w webauthnCredentialDo) Save(values ...*model.WebauthnCredential) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w webauthnCredentialDo) First() (*model.WebauthnCredential, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WebauthnCredential), nil
	}
}

func (w webauthnCredentialDo) Take() (*model.WebauthnCredential, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WebauthnCredential), nil
	}
}

func (w webauthnCredentialDo) Last() (*model.WebauthnCredential, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WebauthnCredential), nil
	}
}

func (w webauthnCredentialDo) Find() ([]*model.WebauthnCredential, error) {
	result, err := w.DO.Find()
	return result.([]*model.WebauthnCredential), err
}

func (w webauthnCredentialDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WebauthnCredential, err error) {
	buf := make([]*model.WebauthnCredential, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w webauthnCredentialDo) FindInBatches(result *[]*model.WebauthnCredential, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w webauthnCredentialDo) Attrs(attrs ...field.AssignExpr) IWebauthnCredentialDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w webauthnCredentialDo) Assign(attrs ...field.AssignExpr) IWebauthnCredentialDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w webauthnCredentialDo) Joins(fields ...field.RelationField) IWebauthnCredentialDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w webauthnCredentialDo) Preload(fields ...field.RelationField) IWebauthnCredentialDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w webauthnCredentialDo) FirstOrInit() (*model.WebauthnCredential, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WebauthnCredential), nil
	}
}

func (w webauthnCredentialDo) FirstOrCreate() (*model.WebauthnCredential, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WebauthnCredential), nil
	}
}

func (w webauthnCredentialDo) FindByPage(offset int, limit int) (result []*model.WebauthnCredential, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w webauthnCredentialDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w webauthnCredentialDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w webauthnCredentialDo) Delete(models ...*model.WebauthnCredential) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *webauthnCredentialDo) withDO(do gen.Dao) *webauthnCredentialDo {
	w.DO = *do.(*gen.DO)
	return w
}
