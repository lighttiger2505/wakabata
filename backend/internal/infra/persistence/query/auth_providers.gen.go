// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/lighttiger2505/wakabata/internal/domain/model"
)

func newAuthProvider(db *gorm.DB, opts ...gen.DOOption) authProvider {
	_authProvider := authProvider{}

	_authProvider.authProviderDo.UseDB(db, opts...)
	_authProvider.authProviderDo.UseModel(&model.AuthProvider{})

	tableName := _authProvider.authProviderDo.TableName()
	_authProvider.ALL = field.NewAsterisk(tableName)
	_authProvider.ID = field.NewString(tableName, "id")
	_authProvider.UserID = field.NewString(tableName, "user_id")
	_authProvider.Provider = field.NewString(tableName, "provider")
	_authProvider.ProviderUserID = field.NewString(tableName, "provider_user_id")
	_authProvider.CreatedAt = field.NewTime(tableName, "created_at")
	_authProvider.UpdatedAt = field.NewTime(tableName, "updated_at")

	_authProvider.fillFieldMap()

	return _authProvider
}

type authProvider struct {
	authProviderDo

	ALL            field.Asterisk
	ID             field.String
	UserID         field.String
	Provider       field.String
	ProviderUserID field.String
	CreatedAt      field.Time
	UpdatedAt      field.Time

	fieldMap map[string]field.Expr
}

func (a authProvider) Table(newTableName string) *authProvider {
	a.authProviderDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a authProvider) As(alias string) *authProvider {
	a.authProviderDo.DO = *(a.authProviderDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *authProvider) updateTableName(table string) *authProvider {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewString(table, "id")
	a.UserID = field.NewString(table, "user_id")
	a.Provider = field.NewString(table, "provider")
	a.ProviderUserID = field.NewString(table, "provider_user_id")
	a.CreatedAt = field.NewTime(table, "created_at")
	a.UpdatedAt = field.NewTime(table, "updated_at")

	a.fillFieldMap()

	return a
}

func (a *authProvider) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *authProvider) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 6)
	a.fieldMap["id"] = a.ID
	a.fieldMap["user_id"] = a.UserID
	a.fieldMap["provider"] = a.Provider
	a.fieldMap["provider_user_id"] = a.ProviderUserID
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
}

func (a authProvider) clone(db *gorm.DB) authProvider {
	a.authProviderDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a authProvider) replaceDB(db *gorm.DB) authProvider {
	a.authProviderDo.ReplaceDB(db)
	return a
}

type authProviderDo struct{ gen.DO }

type IAuthProviderDo interface {
	gen.SubQuery
	Debug() IAuthProviderDo
	WithContext(ctx context.Context) IAuthProviderDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAuthProviderDo
	WriteDB() IAuthProviderDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAuthProviderDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAuthProviderDo
	Not(conds ...gen.Condition) IAuthProviderDo
	Or(conds ...gen.Condition) IAuthProviderDo
	Select(conds ...field.Expr) IAuthProviderDo
	Where(conds ...gen.Condition) IAuthProviderDo
	Order(conds ...field.Expr) IAuthProviderDo
	Distinct(cols ...field.Expr) IAuthProviderDo
	Omit(cols ...field.Expr) IAuthProviderDo
	Join(table schema.Tabler, on ...field.Expr) IAuthProviderDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAuthProviderDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAuthProviderDo
	Group(cols ...field.Expr) IAuthProviderDo
	Having(conds ...gen.Condition) IAuthProviderDo
	Limit(limit int) IAuthProviderDo
	Offset(offset int) IAuthProviderDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAuthProviderDo
	Unscoped() IAuthProviderDo
	Create(values ...*model.AuthProvider) error
	CreateInBatches(values []*model.AuthProvider, batchSize int) error
	Save(values ...*model.AuthProvider) error
	First() (*model.AuthProvider, error)
	Take() (*model.AuthProvider, error)
	Last() (*model.AuthProvider, error)
	Find() ([]*model.AuthProvider, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AuthProvider, err error)
	FindInBatches(result *[]*model.AuthProvider, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AuthProvider) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAuthProviderDo
	Assign(attrs ...field.AssignExpr) IAuthProviderDo
	Joins(fields ...field.RelationField) IAuthProviderDo
	Preload(fields ...field.RelationField) IAuthProviderDo
	FirstOrInit() (*model.AuthProvider, error)
	FirstOrCreate() (*model.AuthProvider, error)
	FindByPage(offset int, limit int) (result []*model.AuthProvider, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAuthProviderDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	FilterWithNameAndRole(name string, role string) (result []model.AuthProvider, err error)
}

// SELECT * FROM @@table WHERE name = @name{{if role !=""}} AND role = @role{{end}}
func (a authProviderDo) FilterWithNameAndRole(name string, role string) (result []model.AuthProvider, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, name)
	generateSQL.WriteString("SELECT * FROM auth_providers WHERE name = ? ")
	if role != "" {
		params = append(params, role)
		generateSQL.WriteString("AND role = ? ")
	}

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (a authProviderDo) Debug() IAuthProviderDo {
	return a.withDO(a.DO.Debug())
}

func (a authProviderDo) WithContext(ctx context.Context) IAuthProviderDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a authProviderDo) ReadDB() IAuthProviderDo {
	return a.Clauses(dbresolver.Read)
}

func (a authProviderDo) WriteDB() IAuthProviderDo {
	return a.Clauses(dbresolver.Write)
}

func (a authProviderDo) Session(config *gorm.Session) IAuthProviderDo {
	return a.withDO(a.DO.Session(config))
}

func (a authProviderDo) Clauses(conds ...clause.Expression) IAuthProviderDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a authProviderDo) Returning(value interface{}, columns ...string) IAuthProviderDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a authProviderDo) Not(conds ...gen.Condition) IAuthProviderDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a authProviderDo) Or(conds ...gen.Condition) IAuthProviderDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a authProviderDo) Select(conds ...field.Expr) IAuthProviderDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a authProviderDo) Where(conds ...gen.Condition) IAuthProviderDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a authProviderDo) Order(conds ...field.Expr) IAuthProviderDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a authProviderDo) Distinct(cols ...field.Expr) IAuthProviderDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a authProviderDo) Omit(cols ...field.Expr) IAuthProviderDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a authProviderDo) Join(table schema.Tabler, on ...field.Expr) IAuthProviderDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a authProviderDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAuthProviderDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a authProviderDo) RightJoin(table schema.Tabler, on ...field.Expr) IAuthProviderDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a authProviderDo) Group(cols ...field.Expr) IAuthProviderDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a authProviderDo) Having(conds ...gen.Condition) IAuthProviderDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a authProviderDo) Limit(limit int) IAuthProviderDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a authProviderDo) Offset(offset int) IAuthProviderDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a authProviderDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAuthProviderDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a authProviderDo) Unscoped() IAuthProviderDo {
	return a.withDO(a.DO.Unscoped())
}

func (a authProviderDo) Create(values ...*model.AuthProvider) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a authProviderDo) CreateInBatches(values []*model.AuthProvider, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a authProviderDo) Save(values ...*model.AuthProvider) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a authProviderDo) First() (*model.AuthProvider, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AuthProvider), nil
	}
}

func (a authProviderDo) Take() (*model.AuthProvider, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AuthProvider), nil
	}
}

func (a authProviderDo) Last() (*model.AuthProvider, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AuthProvider), nil
	}
}

func (a authProviderDo) Find() ([]*model.AuthProvider, error) {
	result, err := a.DO.Find()
	return result.([]*model.AuthProvider), err
}

func (a authProviderDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AuthProvider, err error) {
	buf := make([]*model.AuthProvider, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a authProviderDo) FindInBatches(result *[]*model.AuthProvider, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a authProviderDo) Attrs(attrs ...field.AssignExpr) IAuthProviderDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a authProviderDo) Assign(attrs ...field.AssignExpr) IAuthProviderDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a authProviderDo) Joins(fields ...field.RelationField) IAuthProviderDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a authProviderDo) Preload(fields ...field.RelationField) IAuthProviderDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a authProviderDo) FirstOrInit() (*model.AuthProvider, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AuthProvider), nil
	}
}

func (a authProviderDo) FirstOrCreate() (*model.AuthProvider, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AuthProvider), nil
	}
}

func (a authProviderDo) FindByPage(offset int, limit int) (result []*model.AuthProvider, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a authProviderDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a authProviderDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a authProviderDo) Delete(models ...*model.AuthProvider) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *authProviderDo) withDO(do gen.Dao) *authProviderDo {
	a.DO = *do.(*gen.DO)
	return a
}
