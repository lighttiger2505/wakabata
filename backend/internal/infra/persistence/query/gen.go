// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q                      = new(Query)
	AccessToken            *accessToken
	AuthProvider           *authProvider
	EmailVerificationToken *emailVerificationToken
	Project                *project
	RefreshToken           *refreshToken
	Tag                    *tag
	Task                   *task
	TaskComment            *taskComment
	TaskTag                *taskTag
	User                   *user
	WebauthnCredential     *webauthnCredential
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	AccessToken = &Q.AccessToken
	AuthProvider = &Q.AuthProvider
	EmailVerificationToken = &Q.EmailVerificationToken
	Project = &Q.Project
	RefreshToken = &Q.RefreshToken
	Tag = &Q.Tag
	Task = &Q.Task
	TaskComment = &Q.TaskComment
	TaskTag = &Q.TaskTag
	User = &Q.User
	WebauthnCredential = &Q.WebauthnCredential
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:                     db,
		AccessToken:            newAccessToken(db, opts...),
		AuthProvider:           newAuthProvider(db, opts...),
		EmailVerificationToken: newEmailVerificationToken(db, opts...),
		Project:                newProject(db, opts...),
		RefreshToken:           newRefreshToken(db, opts...),
		Tag:                    newTag(db, opts...),
		Task:                   newTask(db, opts...),
		TaskComment:            newTaskComment(db, opts...),
		TaskTag:                newTaskTag(db, opts...),
		User:                   newUser(db, opts...),
		WebauthnCredential:     newWebauthnCredential(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	AccessToken            accessToken
	AuthProvider           authProvider
	EmailVerificationToken emailVerificationToken
	Project                project
	RefreshToken           refreshToken
	Tag                    tag
	Task                   task
	TaskComment            taskComment
	TaskTag                taskTag
	User                   user
	WebauthnCredential     webauthnCredential
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                     db,
		AccessToken:            q.AccessToken.clone(db),
		AuthProvider:           q.AuthProvider.clone(db),
		EmailVerificationToken: q.EmailVerificationToken.clone(db),
		Project:                q.Project.clone(db),
		RefreshToken:           q.RefreshToken.clone(db),
		Tag:                    q.Tag.clone(db),
		Task:                   q.Task.clone(db),
		TaskComment:            q.TaskComment.clone(db),
		TaskTag:                q.TaskTag.clone(db),
		User:                   q.User.clone(db),
		WebauthnCredential:     q.WebauthnCredential.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:                     db,
		AccessToken:            q.AccessToken.replaceDB(db),
		AuthProvider:           q.AuthProvider.replaceDB(db),
		EmailVerificationToken: q.EmailVerificationToken.replaceDB(db),
		Project:                q.Project.replaceDB(db),
		RefreshToken:           q.RefreshToken.replaceDB(db),
		Tag:                    q.Tag.replaceDB(db),
		Task:                   q.Task.replaceDB(db),
		TaskComment:            q.TaskComment.replaceDB(db),
		TaskTag:                q.TaskTag.replaceDB(db),
		User:                   q.User.replaceDB(db),
		WebauthnCredential:     q.WebauthnCredential.replaceDB(db),
	}
}

type queryCtx struct {
	AccessToken            IAccessTokenDo
	AuthProvider           IAuthProviderDo
	EmailVerificationToken IEmailVerificationTokenDo
	Project                IProjectDo
	RefreshToken           IRefreshTokenDo
	Tag                    ITagDo
	Task                   ITaskDo
	TaskComment            ITaskCommentDo
	TaskTag                ITaskTagDo
	User                   IUserDo
	WebauthnCredential     IWebauthnCredentialDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		AccessToken:            q.AccessToken.WithContext(ctx),
		AuthProvider:           q.AuthProvider.WithContext(ctx),
		EmailVerificationToken: q.EmailVerificationToken.WithContext(ctx),
		Project:                q.Project.WithContext(ctx),
		RefreshToken:           q.RefreshToken.WithContext(ctx),
		Tag:                    q.Tag.WithContext(ctx),
		Task:                   q.Task.WithContext(ctx),
		TaskComment:            q.TaskComment.WithContext(ctx),
		TaskTag:                q.TaskTag.WithContext(ctx),
		User:                   q.User.WithContext(ctx),
		WebauthnCredential:     q.WebauthnCredential.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
