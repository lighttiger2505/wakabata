openapi: 3.0.3
info:
  title: Project Management API
  version: 1.0.0
  description: API for managing users, projects, tasks, comments, tags, and task-tag relationships.

servers:
  - url: https://api.example.com/v1

paths:
  /users:
    get:
      summary: Get all users
      operationId: getUsers
      responses:
        '200':
          description: A list of users.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      summary: Create a new user
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
      responses:
        '201':
          description: User created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  
  /users/{userId}:
    get:
      summary: Get a user by ID
      operationId: getUserById
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: A single user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found.

  /projects:
    get:
      summary: Get all projects
      operationId: getProjects
      responses:
        '200':
          description: A list of projects.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Project'
    post:
      summary: Create a new project
      operationId: createProject
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectCreate'
      responses:
        '201':
          description: Project created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
  
  /projects/{projectId}:
    get:
      summary: Get a project by ID
      operationId: getProjectById
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: A single project.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '404':
          description: Project not found.

  /tasks:
    get:
      summary: Get all tasks
      operationId: getTasks
      responses:
        '200':
          description: A list of tasks.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
    post:
      summary: Create a new task
      operationId: createTask
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskCreate'
      responses:
        '201':
          description: Task created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'

  /tasks/{taskId}:
    get:
      summary: Get a task by ID
      operationId: getTaskById
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: A single task.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '404':
          description: Task not found.

  /task_comments:
    get:
      summary: Get all task comments
      operationId: getTaskComments
      responses:
        '200':
          description: A list of task comments.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TaskComment'
    post:
      summary: Create a new task comment
      operationId: createTaskComment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskCommentCreate'
      responses:
        '201':
          description: Task comment created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskComment'

  /task_comments/{commentId}:
    get:
      summary: Get a task comment by ID
      operationId: getTaskCommentById
      parameters:
        - name: commentId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: A single task comment.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskComment'
        '404':
          description: Task comment not found.

  /tags:
    get:
      summary: Get all tags
      operationId: getTags
      responses:
        '200':
          description: A list of tags.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tag'
    post:
      summary: Create a new tag
      operationId: createTag
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagCreate'
      responses:
        '201':
          description: Tag created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'

  /tags/{tagId}:
    get:
      summary: Get a tag by ID
      operationId: getTagById
      parameters:
        - name: tagId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: A single tag.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
        '404':
          description: Tag not found.

  /task_tags:
    get:
      summary: Get all task-tag relationships
      operationId: getTaskTags
      responses:
        '200':
          description: A list of task-tag relationships.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TaskTag'
    post:
      summary: Create a new task-tag relationship
      operationId: createTaskTag
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskTagCreate'
      responses:
        '201':
          description: Task-tag relationship created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskTag'

  /task_tags/{taskTagId}:
    get:
      summary: Get a task-tag relationship by ID
      operationId: getTaskTagById
      parameters:
        - name: taskTagId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: A single task-tag relationship.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskTag'
        '404':
          description: Task-tag relationship not found.

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string
        email:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    UserCreate:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
        password_hash:
          type: string
      required:
        - username
        - email
        - password_hash

    Project:
      type: object
      properties:
        id:
          type: string
          format: uuid
        user_id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    ProjectCreate:
      type: object
      properties:
        user_id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
      required:
        - user_id
        - name

    Task:
      type: object
      properties:
        id:
          type: string
          format: uuid
        project_id:
